@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq


@inject Transaksi trx
@inject Reports report
@inject Config config
<!-- ======= Hero Section ======= -->
<section id="hero" @onclick="ResetTimer">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Report Transaksi</span><br>
                    <h5 style="color: #00529C; font-weight: bold; margin-top: 5%;">Cetak Report</h5>

                    <div class="row">
                        <div class="col-sm-6">
                            <h5 style="color: #00529C; font-weight: bold; margin-top: 5%;">Dari Tanggal</h5>
                            <div class="form-group">
                                @*<RadzenDatePicker Placeholder="Select Date" Style="font-weight: 700; font-size: 18px;" @bind-Value=@value1 DateFormat="dd'/'MM'/'yyyy" DateRender=@DateRender YearRange="@yearRange" Change="OnChange" />*@

                                <input placeholder="Select date" class="form-control datepicker" type="date" @bind="startdate" />

                                @*<DatePicker class="form-control datepicker" Visible="datePicker2Visible" OnSelected="selected2" />*@

                            </div>

                        </div>
                        <div class="col-sm-6">
                            <h5 style="color: #00529C; font-weight: bold; margin-top: 5%;">Sampai Tanggal</h5>

                            <div class="form-group">
                                @*<RadzenDatePicker Placeholder="Select Date" Style="font-weight: 700; font-size: 18px;" @bind-Value=@value2 DateFormat="dd'/'MM'/'yyyy" DateRender=@DateRender2 YearRange="@yearRange" Change="OnChange" />*@
                                <input placeholder="Select date" class="form-control datepicker" type="date" @bind="enddate" />
                            </div>

                        </div>
                    </div>
                    <button class="btn btn-primary" type="button" style="float: left; margin-top: 9%; font-weight: 700;" @onclick="ClearDate">CLEAR</button>
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/Folder SVG/monthly2.svg" style="float: right;">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="Kembali">Kembali</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progressGK" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="todo">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
                <li class="todo">
                    <em>6</em>
                    <!-- <span>Done</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" @onclick="Generate">Generate</button>
        </div>
    </div>
</footer><!-- End Footer -->
@if (isLoading)
{
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.733);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="background-color: transparent;">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-white" role="status" style="padding:0.5rem; margin-top: 5%;">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <!-- <img src="../assets/img/Spinner.gif"> -->
                </div>
                <div style="text-align: center; color: rgb(255, 255, 255);">
                    <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                    <h3>Laporan sedang di generate..</h3>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private TimeSpan span;
    private int overtime = 60000;
    private bool isTimeOut = false;
    private bool isTime = false;
    private bool isTimer = true;
    private DateTime starttime;

    private DateTime startdate;
    private DateTime enddate;

    private bool isLoading = false;

    private async Task ResetTimer()
    {
        starttime = DateTime.Now;
    }
    private async Task IdleTime()
    {
        do
        {
            span = DateTime.Now - starttime;
            if (overtime > 0 && span.TotalMilliseconds > overtime)
            {
                isTime = true;
                isTimeOut = true;
                break;
            }
        } while (isTimeOut == false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Home condition : entered into new home", "step-action");
            isTimer = true;
            starttime = DateTime.Now;
            await Task.Run(() => IdleTime());
            if (isTime && isTimer)
            {
                isTimeOut = true;
                await Task.Delay(100);
                StateHasChanged();
                await Task.Delay(2000);
                isTimer = false;
                OnClick.InvokeAsync("default");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        startdate = DateTime.Now;
        enddate = DateTime.Now;
    }

    private async Task Kembali()
    {
        isTimer = false;
        isTimeOut = true;
        OnClick.InvokeAsync("default");
    }

    private async Task Generate()
    {
        isLoading = true;
        await Task.Delay(100);
        StateHasChanged();
        isTimer = false;
        isTimeOut = true;
        trx.clearReport();
        report.startdate = startdate.ToString("yyyy-MM-dd");
        report.enddate = enddate.ToString("yyyy-MM-dd");
        //trx.setReportDate(startdate.ToString("yyyy-MM-dd"), enddate.ToString("yyyy-MM-dd"));
        await report.createReportCSV();
        trx.reportAttachment = report.CSVName;
        trx.reportPath = report.CSVPath;
        trx.isSendReport = false;
        string result = await HitServices.SendEmailReport(trx, config);
        await Task.Delay(3000);
        JObject jobResult = JObject.Parse(result);
        if (jobResult["fcdEmailResult"]["statusCode"].ToString() == "2111")
        {
            Console.WriteLine("SEND REPORT SUCCESS");
        }
        else
        {
            Console.WriteLine("SEND REPORT FAILED");
        }
        //trx._ServicesErrorMessage = "Report success";
        OnClick.InvokeAsync("default");
    }

    private async Task ClearDate()
    {
        startdate = DateTime.Now;
        enddate = DateTime.Now;
    }
}
