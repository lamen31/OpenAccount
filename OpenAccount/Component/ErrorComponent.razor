@using Microsoft.AspNetCore.Components
@using OpenAccount.Data

@inject Transaksi trx 

<!-- ======= Hero Section ======= -->
<section id="hero" style="position: fixed;">

    <div class="container">
        <div class="row">
            <div class="col-xl-12 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up" style="text-align: center;">
                <div>
                    <img src="./assets/img/Folder SVG/error-page.svg" style="width: 30%;"><br>

                    @if (isError)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf Anda tidak dapat melanjutkan transaksi, <br>
                            Silahkan menghubungi Petugas Bank / Customer Service"
                        </teks>
                    }
                    else if (isNoTransaction)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf Anda tidak dapat melanjutkan transaksi, <br>
                            Tidak ada transaksi lagi untuk di print"
                        </teks>
                    }
                    else if (isRekeningNotFound)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Rekening tidak ditemukan"
                        </teks>
                    }
                    else if (isNotSerial)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Nomor serial yang Anda masukan salah."
                        </teks>
                    }
                    else if (isGiro)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Rekening Anda tidak bisa melakukan layanan ini."
                        </teks>
                    }
                    else if (isTutup)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Rekening Anda sudah ditutup."
                        </teks>
                    }
                    else if (isDataNotFound)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Data pada rekening Anda tidak ditemukan."
                        </teks>
                    }
                    else if (isNotStatus)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Rekening Anda tidak bisa melakukan layanan ini."<br />
                            @errormessage
                        </teks>
                    }
                    else if (isTidakDitarik)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Rekening Anda tidak bisa melakukan layanan ini."
                        </teks>
                    }
                    else if (isEmailNotValid)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Email yang terdaftar tidak valid, silahkan lakukan pembaharuan data."
                        </teks>
                    }
                    else if (isReport)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Email yang terdaftar tidak valid, silahkan lakukan pembaharuan data."
                        </teks>
                    }
                    else if (isCardDisable)
                    {
                        <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                            "Mohon maaf, <br>
                            Kartu yang anda gunakan tidak dikenal."
                        </teks>
                    }
                </div>
            </div>
        </div>

    </div>
</section>
<!-- End Hero -->

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private bool isNoTransaction;
    private bool isRekeningNotFound;
    private bool isError;
    private bool isNotSerial;
    private bool isGiro;
    private bool isTutup;
    private bool isDataNotFound;
    private bool isNotStatus;
    private bool isTidakDitarik;
    private bool isEmailNotValid;
    private bool isReport;
    private bool isCardDisable;

    private string errorcode = string.Empty;
    private string errormessage = string.Empty;

    private TimeSpan span;
    private int overtime = 10000;
    private bool isTimeOut = false;
    private bool isTime = false;
    private bool isTimer = true;
    private DateTime starttime;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        Utility.WriteLog("Home condition : entered into new home", "step-action");
    //        trx.timeOut = "bukukonfirmasi";
    //        isTimer = true;
    //        starttime = DateTime.Now;
    //        await Task.Run(() => IdleTime());
    //        if (isTime && isTimer)
    //        {
    //            isTimeOut = true;
    //            await Task.Delay(100);
    //            StateHasChanged();
    //            await Task.Delay(2000);
    //            isTimer = false;
    //            OnClick.InvokeAsync("default");
    //        }
    //    }
    //}

    private async Task IdleTime()
    {
        do
        {
            span = DateTime.Now - starttime;
            if (overtime > 0 && span.TotalMilliseconds > overtime)
            {
                isTime = true;
                isTimeOut = true;
                break;
            }
        } while (isTimeOut == false);
    }

    protected override async Task OnInitializedAsync()
    {
        isNoTransaction = false;
        isRekeningNotFound = false;
        isError = false;
        isNotSerial = false;
        isGiro = false;
        isTutup = false;
        isDataNotFound = false;
        isNotStatus = false;
        isTidakDitarik = false;
        isReport = false;
        isCardDisable = false;

        errorcode = trx._ServiceErrorCode;
        //errorcode = "AS-009";
        errormessage = trx._ServicesErrorMessage;

        if(errorcode == "ES-001" || errorcode == "AS-001")
        {
            isRekeningNotFound = true;
        }
        else if(errorcode == "AS-260")
        {
            isNoTransaction = true;
        }
        else if(errorcode== "AS-287")
        {
            isNotSerial = true;
        }
        else if (errorcode == "GIRO" || errorcode == "BISNIS")
        {
            isGiro = true;
        }
        else if(errorcode == "AS-007")
        {
            isTutup = true;
        }
        else if (errorcode == "DW-001")
        {
            isDataNotFound = true;
        }
        else if(errorcode == "NotStatus")
        {
            isNotStatus = true;
        }
        else if(errorcode== "AS-009")
        {
            isTidakDitarik = true;
        }
        else if (errormessage == "Email Not Valid")
        {
            isEmailNotValid = true;
        }
        else if(errorcode== "CARD DISABLE")
        {
            isCardDisable = true;
        }
        //else if(errormessage=="Report success")
        //{
        //    isReport = true;
        //}
        else
        {
            isError = true;
        }
        await Task.Delay(100);
        StateHasChanged();

        
            await Task.Delay(8000);
            isTimeOut = true;
            isTimer = false;
            OnClick.InvokeAsync("default");
        
    }
}
