@using Microsoft.AspNetCore.Components
@using OpenAccount.Data

@inject Transaksi trx
<!-- ======= Hero Section ======= -->
<section id="hero" style="position: fixed;" @onclick="ResetTimer">

    <div class="container">
        <div class="row">
            <div class="col-xl-12 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up" style="text-align: center;">
                <div>
                    <img src="./assets/img/Folder SVG/kartu-tidak-dikenal.svg" style="width: 30%;"><br>
                    <teks style="font-weight: 900; font-size: 32px; text-align: center;">
                        @trx.namaNasabah <br>
                        @nomerRek<br />
                        @produk
                        <br />
                    </teks>
                </div>
            </div>
        </div>

    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" @onclick="Kembali" class="btn btn-primary" style="background-color: #4E4E4E;">BATAL</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button @onclick="Lanjut" type="button" class="btn btn-primary" style="float: right;">LANJUT</button>
        </div>
    </div>
</footer><!-- End Footer -->
@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private TimeSpan span;
    private int overtime = 60000;
    private bool isTimeOut = false;
    private bool isTime = false;
    private bool isTimer = true;
    private DateTime starttime;

    private async Task ResetTimer()
    {
        starttime = DateTime.Now;
    }
    private async Task IdleTime()
    {
        do
        {
            span = DateTime.Now - starttime;
            if (overtime > 0 && span.TotalMilliseconds > overtime)
            {
                isTime = true;
                isTimeOut = true;
                break;
            }
        } while (isTimeOut == false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Home condition : entered into new home", "step-action");
            trx.timeOut = "konfirmasinorekmonthly";
            isTimer = true;
            starttime = DateTime.Now;
            await Task.Run(() => IdleTime());
            if (isTime && isTimer)
            {
                isTimeOut = true;
                await Task.Delay(100);
                StateHasChanged();
                await Task.Delay(2000);
                isTimer = false;
                OnClick.InvokeAsync("konfirmasitimeout");
            }
        }
    }

    private async Task Kembali()
    {
        isTimer = false;
        OnClick.InvokeAsync("default");
    }
    private async Task Lanjut()
    {
        isTimer = false;
        OnClick.InvokeAsync("historiPilih");
    }

    private bool isNoTransaction;
    private bool isRekeningNotFound;
    private bool isError;
    private bool isNotSerial;
    private bool isGiro;
    private bool isTutup;
    private bool isDataNotFound;
    private bool isNotStatus;
    private bool isTidakDitarik;

    private string nomerRek = string.Empty;
    private string produk = string.Empty;
    private string errorcode = string.Empty;
    private string errormessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isNoTransaction = false;
        isRekeningNotFound = false;
        isError = false;
        isNotSerial = false;
        isGiro = false;
        isTutup = false;
        isDataNotFound = false;
        isNotStatus = false;
        isTidakDitarik = false;

        produk = trx._AccountProductType;
        nomerRek = trx._AccountNumber.Substring(0, 4) + "-" + trx._AccountNumber.Substring(4, 2) + "-" + trx._AccountNumber.Substring(6, 2)+"****" + "-" + trx._AccountNumber.Substring(12, 2) + "-" + trx._AccountNumber.Substring(14, 1);
        errorcode = trx._ServiceErrorCode;
        //errorcode = "AS-009";
        errormessage = trx._ServicesErrorMessage;

        await Task.Delay(100);
        StateHasChanged();

    }
}
