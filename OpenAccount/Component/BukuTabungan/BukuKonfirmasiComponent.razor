@using Microsoft.AspNetCore.Components
@using System.IO
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using OpenAccount.Data

@inject Printer print
@inject Transaksi trx
@inject Config config
@inject Utility utility
@inject HitServices services
<!-- ======= Hero Section ======= -->
<section id="hero">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Cetak Transaksi Buku Tabungan</span><br>
                    <teks style="line-height: 45px;">Masukkan Buku Tabungan Anda pada bagian bawah Mesin</teks><br><br>
                    <h3 style="color: #00529C; font-size: 25px; line-height: 40px;">
                        Pastikan buku yang Anda masukkan
                        adalah buku tabungan yang
                        ingin dicetak mutasinya kemudian tekan<b>“Cetak”</b>
                    </h3>
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/printer.png" class="img-fluid" alt="" style="margin-top: 5%;">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="BukuInputData">Kembali</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="done">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" data-toggle="modal" @onclick="BukuBerhasil">Cetak</button>
        </div>
    </div>
</footer><!-- End Footer -->
@if (isVisible)
{
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: rgb(0, 0, 0);">
                        <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                        <h5 style="font-style:italic;">Sedang dalam proses...</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@if (isBaris)
{
    <div class="modal" id="exampleModalCenter" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: rgb(0, 0, 0);">
                        <h3 class="teks" style="margin-top: 5%;">Silahkan ke halaman selanjutnya..</h3>
                        <h5 style="font-style:italic;">Kemudian tekan <b>Cetak</b></h5>
                        <button type="button" class="btn btn-primary" style="text-align:center; margin-top: 5%;" data-toggle="modal" data-target="#exampleModalCenter" @onclick="change">Cetak</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private bool isVisible = false;
    private bool isBaris = false;
    private bool isEmpty = false;
    private bool cetak = true;
    private bool bukuhabis = false;
    private int maxbaris;
    private int maxhalaman;
    private string tempmaxbaris;
    private string tempmaxhalaman;
    private int baris;
    private int totaldata;
    private int totalbaris;
    private int halaman;
    private string saldo;

    protected override async Task OnInitializedAsync()
    {
        Utility.WriteLog("Buku condition : hit service passbook start", "step-action");
        await ServicePassbook();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Buku condition : entered into buku konfirmasi", "step-action");
        }
    }

    private async Task ServicePassbook()
    {
        trx.clearListBuku();
        Utility.WriteLog("Buku condition : clear list buku success", "step-action");
        string myJson = "{\"name\":\"asd\"," + "\"job\":\"warrior\"}";
        string myLink = config.Read("LINK", Config.PARAM_SERVICES_LINK);
        string myUrl = myLink + config.Read("LINK", Config.PARAM_SERVICES_PASSBOOK);
        trx._Nasabah[1] = myUrl.Substring(myUrl.Length - 15, 15);
        Utility.WriteLog("Buku condition : get service start", "step-action");
        string strResultGET = await services.GetCallAPI(myUrl, myJson);
        if (strResultGET != null)
        {
            JObject jobResult = JObject.Parse(strResultGET);
            trx.setTransaksiID((string)jobResult["transaction"].SelectToken("transactionId"));
            Utility.WriteLog("Buku condition : set transaksi ID " + trx._TransaksiID + " success", "step-action");

            if ((string)jobResult["transaction"].SelectToken("responseCode") == "0000")
            {
                Utility.WriteLog("Buku condition : hit service passbook success", "step-action");
                foreach (var transaksi in jobResult.SelectToken("listTransaction").Select((transaksi) => (transaksi)))
                {
                    trx.AddListBuku((string)transaksi.SelectToken("transactionId"), (string)transaksi.SelectToken("jenisTransaksi"), (string)transaksi.SelectToken("nominal"), (string)transaksi.SelectToken("keterangan"), (string)transaksi.SelectToken("kodeTransaksi"), (string)transaksi.SelectToken("tanggal"), (string)transaksi.SelectToken("securityCode"));
                }
                Utility.WriteLog("Buku condition : get list data success", "step-action");
            }
        }
    }

    private async Task BukuInputData()
    {
        Utility.WriteLog("Buku condition : move to buku input data", "step-action");
        OnClick.InvokeAsync("bukuinputdata");
    }

    private async Task BukuBerhasil()
    {
        tempmaxbaris = config.Read("PASSBOOK", Config.PARAM_PASSBOOK_MAXBARIS);
        maxbaris = Convert.ToInt32(tempmaxbaris);
        tempmaxhalaman = config.Read("PASSBOOK", Config.PARAM_PASSBOOK_MAXHALAMAN);
        maxhalaman = Convert.ToInt32(tempmaxhalaman);

        isVisible = !isVisible;
        Utility.WriteLog("Buku condition : modal visible appear", "step-action");
        await Task.Delay(100);
        StateHasChanged();

        int jmlhalaman = 1;
        baris = Convert.ToInt32(trx._BukuBaris);
        baris -= 1;
        totaldata = trx._listbuku.Count;
        totalbaris = baris + totaldata;
        halaman = Convert.ToInt32(trx._BukuHalaman);
        saldo = trx._BukuSaldo;
        if (totalbaris > maxbaris)
        {
            int n = totalbaris / 40;
            string[] temptipe = null;
            string[] tempsandi = null;
            string[] tempnominal = null;
            string[] temppengesahan = null;
            int startindex = 0;

            if (totalbaris % 40 > 0)
            {
                n += 1;
            }

            //temptipe = new string[trx._listbuku.Count];
            //tempsandi = new string[trx._listbuku.Count];
            //tempnominal = new string[trx._listbuku.Count];
            //temppengesahan = new string[trx._listbuku.Count];

            List<Transaksi.printBuku> tempList = new List<Transaksi.printBuku>();
            Utility.WriteLog("Buku condition : temporary list created", "step-action");
            foreach (var buku in trx._listbuku)
            {
                tempList.Add(buku);
            }
            //for (int i = 0;i<40;i++)
            //{
            //    str2.Add(trx._listbuku[i]._Nominal);
            //}
            //Array.Copy(trx._BukuTipe, startindex, temptipe, 0, trx._BukuTipe.Length);
            //Array.Copy(trx._BukuSandi, 0, tempsandi, 0, trx._BukuSandi.Length);
            //Array.Copy(trx._BukuNominal, 0, tempnominal, 0, trx._BukuNominal.Length);
            //Array.Copy(trx._BukuPengesahan, 0, temppengesahan, 0, trx._BukuPengesahan.Length);

            for (int i = 0; i < n; i++)
            {
                string TransactionID = string.Empty;
                string JenisTransaksi = string.Empty;
                string Nominal = string.Empty;
                string Keterangan = string.Empty;
                string KodeTransaksi = string.Empty;
                string Tanggal = string.Empty;
                string SecurityCode = string.Empty;

                string tanggal = trx._BukuDate;
                string[] tipe = null;
                string[] sandi = null;
                string[] nominal = null;
                string[] pengesahan = null;

                if (i == 0)
                {
                    trx.clearListBuku();
                    Utility.WriteLog("Buku condition : clear list buku success", "step-action");
                    //tipe = new string[40 - baris];
                    //sandi = new string[40 - baris];
                    //nominal = new string[40 - baris];
                    //pengesahan = new string[40 - baris];
                    //Array.Copy(temptipe, startindex, tipe, 0, 40 - baris);
                    //Array.Copy(tempsandi, startindex, sandi, 0, 40 - baris);
                    //Array.Copy(tempnominal, startindex, nominal, 0, 40 - baris);
                    //Array.Copy(temppengesahan, startindex, pengesahan, 0, 40 - baris);
                    for (int j = 0; j < 40 - baris; j++)
                    {
                        trx.AddListBuku(tempList[j]._TransactionID, tempList[j]._JenisTransaksi, tempList[j]._Nominal, tempList[j]._Keterangan, tempList[j]._KodeTransaksi, tempList[j]._Tanggal, tempList[j]._SecurityCode);
                    }
                    baris += 1;
                    //trx.setPassbookTransaksi(baris.ToString(), halaman.ToString(), tanggal, tipe, sandi, nominal, saldo, pengesahan);
                    trx.setPassbookTransaksi(baris.ToString(), halaman.ToString(), saldo.ToString());
                    baris -= 1;
                    startindex = 40 - baris;
                    Utility.WriteLog("Buku condition : print halaman ke-" + jmlhalaman.ToString(), "step-action");
                    saldo = await Task.Run(() => print.PrintPassbook(trx));
                    Utility.WriteLog("Buku condition : print history halaman ke-" + jmlhalaman.ToString() + " success", "step-action");
                    jmlhalaman += 1;
                    //await Task.Delay(10000);
                    if (int.Parse(saldo) == 0) isEmpty = true;
                    else isEmpty = false;
                }
                else
                {
                    if (i == n - 1)
                    {
                        trx.clearListBuku();
                        Utility.WriteLog("Buku condition : clear list buku success", "step-action");
                        int sisabaris = tempList.Count - startindex;
                        baris = 1;
                        //tipe = new string[sisabaris];
                        //sandi = new string[sisabaris];
                        //nominal = new string[sisabaris];
                        //pengesahan = new string[sisabaris];
                        //Array.Copy(temptipe, startindex, tipe, 0, sisabaris);
                        //Array.Copy(tempsandi, startindex, sandi, 0, sisabaris);
                        //Array.Copy(tempnominal, startindex, nominal, 0, sisabaris);
                        //Array.Copy(temppengesahan, startindex, pengesahan, 0, sisabaris);
                        for (int j = startindex; j < tempList.Count; j++)
                        {
                            trx.AddListBuku(tempList[j]._TransactionID, tempList[j]._JenisTransaksi, tempList[j]._Nominal, tempList[j]._Keterangan, tempList[j]._KodeTransaksi, tempList[j]._Tanggal, tempList[j]._SecurityCode);
                        }
                        //trx.setPassbookTransaksi(baris.ToString(), halaman.ToString(), tanggal, tipe, sandi, nominal, saldo, pengesahan);
                        trx.setPassbookTransaksi(baris.ToString(), halaman.ToString(), saldo.ToString());
                        Utility.WriteLog("Buku condition : print halaman ke-" + jmlhalaman.ToString(), "step-action");
                        saldo = await Task.Run(() => print.PrintPassbook(trx));
                        Utility.WriteLog("Buku condition : print history halaman ke-" + jmlhalaman.ToString() + " success", "step-action");
                        //await Task.Delay(10000);
                        Utility.WriteLog("Buku condition : move to buku berhasil", "step-action");
                        OnClick.InvokeAsync("bukuberhasil");
                        break;
                    }
                    else
                    {
                        trx.clearListBuku();
                        Utility.WriteLog("Buku condition : clear list buku success", "step-action");
                        baris = 1;
                        //tipe = new string[40];
                        //sandi = new string[40];
                        //nominal = new string[40];
                        //pengesahan = new string[40];
                        //Array.Copy(temptipe, startindex, tipe, 0, 40);
                        //Array.Copy(tempsandi, startindex, sandi, 0, 40);
                        //Array.Copy(tempnominal, startindex, nominal, 0, 40);
                        //Array.Copy(temppengesahan, startindex, pengesahan, 0, 40);
                        for (int j = startindex; j < startindex + 40; j++)
                        {
                            trx.AddListBuku(tempList[j]._TransactionID, tempList[j]._JenisTransaksi, tempList[j]._Nominal, tempList[j]._Keterangan, tempList[j]._KodeTransaksi, tempList[j]._Tanggal, tempList[j]._SecurityCode);
                        }
                        trx.setPassbookTransaksi(baris.ToString(), halaman.ToString(), tanggal, tipe, sandi, nominal, saldo, pengesahan);
                        startindex = startindex + 40;
                        Utility.WriteLog("Buku condition : print halaman ke-" + jmlhalaman.ToString(), "step-action");
                        saldo = await Task.Run(() => print.PrintPassbook(trx));
                        Utility.WriteLog("Buku condition : print history halaman ke-" + jmlhalaman.ToString() + " success", "step-action");
                        jmlhalaman += 1;
                        await Task.Delay(10000);
                    }
                }
                halaman += 1;
                isVisible = false;
                await Task.Delay(100);
                StateHasChanged();
                if (halaman > maxhalaman)
                {
                    cetak = false;
                    bukuhabis = true;
                    Utility.WriteLog("Buku condition : move to buku penuh", "step-action");
                    OnClick.InvokeAsync("bukupenuh");
                    break;
                }
                else
                {
                    isBaris = !isBaris;
                    await Task.Delay(100);
                    StateHasChanged();
                    Utility.WriteLog("Buku condition : modal baris appear", "step-action");
                    do
                    {
                        await Task.Delay(100);
                    } while (isBaris);
                }
            }
        }
        else if (totalbaris < maxbaris)
        {
            saldo = await Task.Run(() => print.PrintPassbook(trx));
            Utility.WriteLog("Buku condition : move to buku berhasil", "step-action");
            OnClick.InvokeAsync("bukuberhasil");
        }
    }

    private void change()
    {
        isVisible = true;
        isBaris = false;
    }
}
