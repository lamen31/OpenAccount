@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using System.IO.Ports
@using System.Text;

@inject Config config
@inject Transaksi trx
@inject Utility utility
@inject EDC edc
<!-- ======= Hero Section ======= -->
<section id="hero">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Cetak Transaksi Buku Tabungan</span><br>
                    <teks>Silakan Masukkan PIN Anda</teks>
                    <h3 style="color: #00529C; font-size: 25px;">"Tekan “ENTER” jika selesai memasukkan PIN"</h3>
                    @if (isSalah)
                    {
                    <h3 style="color: #ff0000; font-size: 20px; margin-top:20%;">PIN yang anda masukan <b>SALAH</b>.</h3>
                    <h3 style="color: #ff0000; font-size: 20px; font-style:italic">Kesempatan mencoba @tryLimit.ToString()x lagi</h3>
                    }
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/Folder GIF/Enter-PIN.gif" class="img-fluid" alt="" style="margin-top: 1%; width:60%">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <!-- <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;">Batal</button> -->
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="todo">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <!-- <button type="button" class="btn btn-primary" style="float: right;">Lanjut</button> -->
        </div>
    </div>
</footer><!-- End Footer -->

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    private string[] Nasabah = new string[3];
    private string pinNasabah = string.Empty;
    private string strpin = string.Empty;
    private SerialPort sPort = new SerialPort();
    private bool isLoop = true;
    private bool isCancel = false;
    private bool isSalah = false;
    private bool isEDC = false;
    private int tryLimit = 3;
    SerialPort serialPort = new SerialPort();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);

        await Task.Delay(1000);
        Console.WriteLine("INPUT PIN SUCCESS");
        Utility.WriteLog("Buku condition : input pin success", "step-action");
        for (int i = 0; i < Nasabah.Length; i++)
        {
            if (i == 0)
                Nasabah[i] = config.Read("NASABAH", Config.PARAM_NAMA_NASABAH);
            else if (i == 1)
                Nasabah[i] = config.Read("NASABAH", Config.PARAM_REKENING_NASABAH);
            else if (i == 2)
                Nasabah[i] = config.Read("NASABAH", Config.PARAM_ALAMAT_NASABAH);
        }
        Console.WriteLine("INPUT DATA SUCCESS");
        Utility.WriteLog("Buku condition : input data " + Nasabah[0].ToString() + " success", "step-action");
        trx.setArrayNasabah(Nasabah);
        OnClick.InvokeAsync("bukuinputdata");

        //isEDC = true;
        //await InputPin();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Buku condition : entered into buku input pin", "step-action");
        }
    }

    private async Task InputPin()
    {
        while (isEDC)
        {
            sPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
            Utility.WriteLog("Buku condition : EDC process start", "step-action");
            await Task.Delay(100);
            try
            {
                await EDC("14");
                if (!isCancel)
                {
                    pinNasabah = config.Read("NASABAH", Config.PARAM_PIN_NASABAH);
                    if (strpin == pinNasabah)
                    {
                        Utility.WriteLog("Buku condition : input pin success", "step-action");
                        for (int i = 0; i < Nasabah.Length; i++)
                        {
                            if (i == 0)
                                Nasabah[i] = config.Read("NASABAH", Config.PARAM_NAMA_NASABAH);
                            else if (i == 1)
                                Nasabah[i] = config.Read("NASABAH", Config.PARAM_REKENING_NASABAH);
                            else if (i == 2)
                                Nasabah[i] = config.Read("NASABAH", Config.PARAM_ALAMAT_NASABAH);
                        }
                        trx.setArrayNasabah(Nasabah);
                        Utility.WriteLog("Buku condition : input data " + Nasabah[0].ToString() + " success", "step-action");
                        isEDC = false;
                        Utility.WriteLog("Buku condition : move to histori pilih menu", "step-action");
                        OnClick.InvokeAsync("bukuinputdata");
                        break;
                    }
                    else
                    {
                        isSalah = true;
                        tryLimit -= 1;
                        Utility.WriteLog("Buku condition : PIN not correct, tryLimit: " + tryLimit, "step-action");
                        if (tryLimit == 0)
                        {
                            Utility.WriteLog("Buku condition : tryLimit has reached 0", "step-action");
                            isEDC = false;
                            Utility.WriteLog("Buku condition : move to blokir kartu", "step-action");
                            OnClick.InvokeAsync("blokirkartu");
                            break;
                        }
                        strpin = string.Empty;
                        StateHasChanged();
                        sPort.Close();
                        sPort.Dispose();
                        continue;
                    }
                }
                else
                {
                    isEDC = false;
                    Utility.WriteLog("Buku condition : move to ambil kartu", "step-action");
                    OnClick.InvokeAsync("ambilkartu");
                    break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Utility.WriteLog("Histori condition : EDC error --> " + ex.Message, "step-action");
            }
        }
    }

    private async Task EDC(string ecrmsg)
    {
        isLoop = true;
        string _statusCode = string.Empty;
        string stx = "02";
        string ecr = "424E49"; // BNI;
        string ecr_messsage = string.Empty;
        string etx = "03";
        string lrc = "00";
        string dataSplit = "";

        string dataRespond = string.Empty;
        //serialPort = new SerialPort();

        Utility.WriteLog("Buku condition : EDC serial port close", "step-action");
        //serialPort.Close();

        string request_BankFiller = string.Empty;

        request_BankFiller = edc.HexaBankFiller("");

        ecr_messsage = ecrmsg
            + request_BankFiller;

        string data = stx
            + ecr
            + ecr_messsage
            + etx
            + lrc;

        byte[] data2 = edc.StringToByteArray(data);
        byte[] data2_with_lrc = edc.LRC(data2);
        //data2[56] = 0x77;
        serialPort.PortName = sPort.PortName;
        serialPort.BaudRate = 115200;
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceivedLoop);

        Console.WriteLine("1");

        try
        {
            Utility.WriteLog("Buku condition : EDC serial port open", "step-action");
            serialPort.Open();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Utility.WriteLog("Histori condition : EDC error --> " + ex.Message, "step-action");
        }

        Utility.WriteLog("Buku condition : EDC serial port write", "step-action");
        serialPort.Write(data2_with_lrc, 0, data2_with_lrc.Length);

        do
        {
            await Task.Delay(150);

            dataRespond = string.Empty;
            dataSplit = string.Empty;
            //bool exitLoop = false;
            //Console.WriteLine(dataRespond);
            if (serialPort.IsOpen)
            {
                Utility.WriteLog("Buku condition : EDC serial port already open", "step-action");
                string dataCurrent = serialPort.ReadExisting();
                dataRespond += dataCurrent;
                //Console.WriteLine("Data Current: " + dataCurrent);
                //Console.WriteLine("Data Respond: " + dataRespond);
                if (dataRespond.Contains("BNI"))
                {
                    dataSplit = dataRespond.Substring(dataRespond.IndexOf("BNI"));
                    byte[] buffer = Encoding.ASCII.GetBytes(dataSplit);
                    int intBuffer = buffer[4];
                    switch (intBuffer)
                    {
                        case 69:
                            //Console.WriteLine(strpin);
                            if (strpin.Length == 6)
                                isLoop = false;
                            else
                                continue;
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin enter", "step-action");
                            break;
                        case 88:
                            //Console.WriteLine(strpin);
                            isCancel = true;
                            isLoop = false;
                            Utility.WriteLog("Buku condition : EDC pin cancel", "step-action");
                            break;
                        case 84:
                            //Console.WriteLine(strpin);
                            isCancel = true;
                            isLoop = false;
                            break;
                        case 67:
                            strpin = string.Empty;
                            Utility.WriteLog("Buku condition : EDC pin clear", "step-action");
                            break;
                        case 32:
                            if (strpin.Length < 7)
                                strpin = strpin + "0";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 0", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 1:
                            if (strpin.Length < 7)
                                strpin = strpin + "1";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 1", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 2:
                            if (strpin.Length < 7)
                                strpin = strpin + "2";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 2", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 3:
                            if (strpin.Length < 7)
                                strpin = strpin + "3";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 3", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 4:
                            if (strpin.Length < 7)
                                strpin = strpin + "4";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 4", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 5:
                            if (strpin.Length < 7)
                                strpin = strpin + "5";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 5", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 6:
                            if (strpin.Length < 7)
                                strpin = strpin + "6";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 6", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 7:
                            if (strpin.Length < 7)
                                strpin = strpin + "7";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 7", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 8:
                            if (strpin.Length < 7)
                                strpin = strpin + "8";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 8", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                        case 9:
                            if (strpin.Length < 7)
                                strpin = strpin + "9";
                            Utility.WriteLog("Buku condition : " + strpin, "step-action");
                            Utility.WriteLog("Buku condition : EDC pin 9", "step-action");
                            //Console.WriteLine(strpin);
                            break;
                    }
                }
                //Console.WriteLine("Data Split: " + dataSplit);
                if (dataRespond.Contains("\x06"))
                {
                    if (dataRespond.Length > 10)
                    {
                        //serialPort.Close();
                        Utility.WriteLog("Buku condition : EDC ACK", "step-action");
                    }
                }
                else if (dataRespond.Contains("\x15"))
                {
                    serialPort.Close();
                    Utility.WriteLog("Buku condition : EDC NAK", "step-action");
                }
            }
            await Task.Delay(100);
            StateHasChanged();
        } while (isLoop);

        Console.WriteLine("2");
        Utility.WriteLog("Buku condition : EDC serial port close", "step-action");
        serialPort.Close();
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
    }
}
