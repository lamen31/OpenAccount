@using Microsoft.AspNetCore.Components
@using System.IO.Ports 
@using System.Text
@using OpenAccount.Data

@inject Utility utility 
@inject EDC edc
@inject Config config
@inject TransaksiBaru trxbaru

<!-- ======= Hero Section ======= -->
<section id="hero" style="margin-top: 50px;">

    <div class="container">
        <div class="row">
            <div class="col-xl-12 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Buka Rekening</span><br>
                </div>
                <h3 style="color: #00529C; text-align: center; font-weight: 900; margin-bottom: 2%; margin-top: 10%;">Masukkan 6 Digit PIN Baru Anda</h3>

                <form>
                    <div style="padding-left: 35%; padding-right: 35%;">
                        <div class="row">
                            <div class="col">
                                <input type="text" class="form-control" style="text-align: center;" placeholder="******" @bind="strpin">
                            </div>
                        </div>
                    </div>
                </form>

            </div>


        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="DataTabungan">Kembali</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="done">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
                <li class="todo">
                    <em>6</em>
                    <!-- <span>Done</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" @onclick="KonfirmasiPin">Lanjut</button>
        </div>
    </div>
</footer><!-- End Footer -->

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private string strpin = string.Empty;
    private SerialPort sPort = new SerialPort();
    private bool loopEDC = false;
    private bool isLoop = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("ENTERED INTO BUKA REKENING INPUT PIN ATM");
            Utility.WriteLog("Buka rekening condition : entered into buka rekening input pin atm", "step-action");
            sPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
            await EDC("14");
        }
    }

    private async Task EDC(string ecrmsg)
    {
        string _statusCode = string.Empty;
        string stx = "02";
        string ecr = "424E49"; // BNI;
        string ecr_messsage = string.Empty;
        string etx = "03";
        string lrc = "00";
        string dataSplit = "";

        string dataRespond = string.Empty;
        SerialPort serialPort = new SerialPort();

        serialPort.Close();

        string request_BankFiller = string.Empty;

        request_BankFiller = edc.HexaBankFiller("");

        ecr_messsage = ecrmsg
            + request_BankFiller;

        string data = stx
            + ecr
            + ecr_messsage
            + etx
            + lrc;

        byte[] data2 = edc.StringToByteArray(data);
        byte[] data2_with_lrc = edc.LRC(data2);
        //data2[56] = 0x77;
        serialPort.PortName = sPort.PortName;
        serialPort.BaudRate = 115200;
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceivedLoop);

        Console.WriteLine("1");

        serialPort.Open();

        serialPort.Write(data2_with_lrc, 0, data2_with_lrc.Length);

        do
        {
            await Task.Delay(150);
            dataRespond = string.Empty;
            dataSplit = string.Empty;
            //bool exitLoop = false;
            //Console.WriteLine(dataRespond);
            if (serialPort.IsOpen)
            {

                string dataCurrent = serialPort.ReadExisting();
                dataRespond += dataCurrent;
                //Console.WriteLine("Data Current: " + dataCurrent);
                //Console.WriteLine("Data Respond: " + dataRespond);
                if (dataRespond.Contains("BNI"))
                {
                    dataSplit = dataRespond.Substring(dataRespond.IndexOf("BNI"));
                    byte[] buffer = Encoding.ASCII.GetBytes(dataSplit);
                    int intBuffer = buffer[4];
                    switch (edc.statusCode)
                    {
                        case "45":
                            Console.WriteLine(strpin);
                            if (strpin.Length == 6)
                            {
                                isLoop = false;
                                KonfirmasiPin();
                            }
                            break;
                        case "58":
                            Console.WriteLine(strpin);
                            isLoop = false;
                            break;
                        case "54":
                            Console.WriteLine(strpin);
                            isLoop = false;
                            break;
                        case "43":
                            strpin = string.Empty;
                            break;
                        case "20":
                            if (strpin.Length < 7)
                                strpin = strpin + "0";
                            Console.WriteLine(strpin);
                            break;
                        case "01":
                            if (strpin.Length < 7)
                                strpin = strpin + "1";
                            Console.WriteLine(strpin);
                            break;
                        case "02":
                            if (strpin.Length < 7)
                                strpin = strpin + "2";
                            Console.WriteLine(strpin);
                            break;
                        case "03":
                            if (strpin.Length < 7)
                                strpin = strpin + "3";
                            Console.WriteLine(strpin);
                            break;
                        case "04":
                            if (strpin.Length < 7)
                                strpin = strpin + "4";
                            Console.WriteLine(strpin);
                            break;
                        case "05":
                            if (strpin.Length < 7)
                                strpin = strpin + "5";
                            Console.WriteLine(strpin);
                            break;
                        case "06":
                            if (strpin.Length < 7)
                                strpin = strpin + "6";
                            Console.WriteLine(strpin);
                            break;
                        case "07":
                            if (strpin.Length < 7)
                                strpin = strpin + "7";
                            Console.WriteLine(strpin);
                            break;
                        case "08":
                            if (strpin.Length < 7)
                                strpin = strpin + "8";
                            Console.WriteLine(strpin);
                            break;
                        case "09":
                            if (strpin.Length < 7)
                                strpin = strpin + "9";
                            Console.WriteLine(strpin);
                            break;
                    }
                }
                //Console.WriteLine("Data Split: " + dataSplit);
                if (dataRespond.Contains("\x06"))
                {
                    if (dataRespond.Length > 10)
                    {
                        //serialPort.Close();
                        Console.WriteLine("EDC ACK");
                    }
                }
                else if (dataRespond.Contains("\x15"))
                {
                    serialPort.Close();
                    Console.WriteLine("EDC NAK");
                }
            }
            StateHasChanged();
            switch (strpin.Length)
            {
                case 1:
                    strpin = strpin.Substring(0, strpin.Length-1) + "*";
                    break;
                case 2:
                    strpin = strpin.Substring(0, strpin.Length-2) + "**";
                    break;
                case 3:
                    strpin = strpin.Substring(0, strpin.Length-3) + "***";
                    break;
                case 4:
                    strpin = strpin.Substring(0, strpin.Length-4) + "****";
                    break;
                case 5:
                    strpin = strpin.Substring(0, strpin.Length-5) + "*****";
                    break;
                case 6:
                    strpin = strpin.Substring(0, strpin.Length-6) + "******";
                    break;
            }
            await Task.Delay(500);
            StateHasChanged();
        } while (isLoop);

        Console.WriteLine("2");
        serialPort.Close();
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
    }

    //private async Task EDCloop()
    //{
    //    edc.serialPort = new SerialPort();
    //    do
    //    {
    //        edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceivedLoop);
    //        await Task.Delay(500);
    //        if (edc.statusCode == "20")
    //        {
    //            strpin += "0";
    //        }
    //        else if (edc.statusCode == "01")
    //        {
    //            strpin += "1";
    //        }
    //        else if (edc.statusCode == "02")
    //        {
    //            strpin += "2";
    //        }
    //        else if (edc.statusCode == "03")
    //        {
    //            strpin += "3";
    //        }
    //        else if (edc.statusCode == "04")
    //        {
    //            strpin += "4";
    //        }
    //        else if (edc.statusCode == "05")
    //        {
    //            strpin += "5";
    //        }
    //        else if (edc.statusCode == "06")
    //        {
    //            strpin += "6";
    //        }
    //        else if (edc.statusCode == "07")
    //        {
    //            strpin += "7";
    //        }
    //        else if (edc.statusCode == "08")
    //        {
    //            strpin += "8";
    //        }
    //        else if (edc.statusCode == "09")
    //        {
    //            strpin += "9";
    //        }
    //        else if (edc.statusCode == "43")
    //        {
    //            strpin = strpin.Substring(0, strpin.Length - 1);
    //        }
    //        else if (edc.statusCode == "58")
    //        {
    //            OnClick.InvokeAsync("home");
    //            break;
    //        }
    //        else if (edc.statusCode == "45")
    //        {
    //            if (strpin.Length == 6)
    //                break;
    //            else
    //                continue;
    //        }
    //    } while (!loopEDC);
    //}

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        //edc.Clear();
        //edc.serialPort = new SerialPort();
        //edc.serialPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
        //edc.serialPort.DataReceived += new SerialDataReceivedEventHandler(edc.port_DataReceived);
        //await Task.Run(() => edc.SendCommandLoop(edc.serialPort, "14"));
        //EDCloop();
        //do
        //{
        //Task.Delay(500);
        //if (edc.statusCode == "20")
        //{
        //    strpin += "0";
        //}
        //else if (edc.statusCode == "01")
        //{
        //    strpin += "1";
        //}
        //else if (edc.statusCode == "02")
        //{
        //    strpin += "2";
        //}
        //else if (edc.statusCode == "03")
        //{
        //    strpin += "3";
        //}
        //else if (edc.statusCode == "04")
        //{
        //    strpin += "4";
        //}
        //else if (edc.statusCode == "05")
        //{
        //    strpin += "5";
        //}
        //else if (edc.statusCode == "06")
        //{
        //    strpin += "6";
        //}
        //else if (edc.statusCode == "07")
        //{
        //    strpin += "7";
        //}
        //else if (edc.statusCode == "08")
        //{
        //    strpin += "8";
        //}
        //else if (edc.statusCode == "09")
        //{
        //    strpin += "9";
        //}
        //else if (edc.statusCode == "43")
        //{
        //    strpin = strpin.Substring(0, strpin.Length-1);
        //}
        //else if (edc.statusCode == "58")
        //{
        //    OnClick.InvokeAsync("home");
        //    //break;
        //}
        //else if (edc.statusCode == "45")
        //{
        //    //if (strpin.Length == 6)
        //    //    break;
        //    //else
        //    //    continue;
        //}

        //} while (strpin.Length < 7);
    }

    private async Task DataTabungan()
    {
        OnClick.InvokeAsync("bukarekeningdatatabungan");
    }

    private async Task KonfirmasiPin()
    {
        if (strpin.Length == 6)
        {
        Console.WriteLine("INPUT PIN ATM PERTAMA SUCCESS");
        Utility.WriteLog("Buka rekening condition : input pin atm pertama success", "step-action");
        trxbaru.setPinPertama(strpin);
        Console.WriteLine("SET PIN " + strpin + " SUCCESS");
        Utility.WriteLog("Buka rekening condition : set pin " + strpin + " success", "step-action");
        OnClick.InvokeAsync("bukarekeninginputpinatmkedua");
        }

    }
}
