@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using System.IO.Ports
@using System.Text;
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using OpenAccount.Report

@inject Config config
@inject Transaksi trx
@inject Utility utility
@inject EDC edc
@inject Reports report
<!-- ======= Hero Section ======= -->
<body oncontextmenu="return false" class="bg-home2" style="background-image:url('../assets/img/Folder SVG/bg-landing.svg')">
    <section id="hero" style="position: fixed;">
        
        <div class="container" >
            <div class="row" style="margin-top:8%;">
                <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                    <div>
                        <teks style="font-weight: 900;" @onclick="Report">Melayani dengan Setulus Hati</teks>
                        <h5 style="margin-top: 3%; color: #00539cb7; font-size: 20px;">Self Service Passbook Printing </h5>
                        <h5 style="margin-top: 3%; color: #00539cb7; font-size: 10px;">Powered by Trilogi Persada </h5>
                        <button class="btn btn-primary" type="button" style="float: left; margin-top: 9%; font-weight: 700;" @onclick="InputRekening">START HERE</button>
                    </div>
                </div>
                <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                    <img src="./assets/img/Folder GIF/Landing-animation2.gif" style="width: 100%;">
                </div>
            </div>

        </div>
    </section>
</body>
<!-- End Hero -->

@if (isNotHour)
{
    @*<div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div style="text-align: center; color: rgb(0, 0, 0);">
                            <h3 class="teks" style="margin-top: 5%;">SISTEM ERROR</h3>
                            <h5 style="font-style:italic;">Silahkan Hubungi Customer Service.</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.733);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="background-color: transparent;">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-white" role="status" style="padding:0.5rem; margin-top: 5%;">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <!-- <img src="../assets/img/Spinner.gif"> -->
                </div>
                <div style="text-align: center; color: rgb(255, 255, 255);">
                    <h3 class="teks" style="margin-top: 5%;">MAAF, mesin sedang tidak beroperasi</h3>
                    <h3>Jam operasional mesin 06.00-16.00</h3>
                </div>

            </div>
        </div>
    </div>
}

@code {
        [Parameter]
        public EventCallback<string> OnClick { get; set; }

    private TimeSpan span;
    private int overtime = 60000;
    private bool isTime = false;
    private bool isTimer = true;
    private DateTime starttime;

    private bool isNotHour = false;
    private string TimeNow = string.Empty;
    private bool isTrue = false;
    private bool isRead = false;
    private bool isTimeOut = false;
    private bool isLoop = false;
    private bool isCancel = false;
    private bool isComplete = false;
    private bool isSendReport = true;

    private SerialPort sPort = new SerialPort();

    private int clickcount = 0;

    private async Task testOnclik()
    {
        if (DateTime.Now.Hour > 15 || DateTime.Now.Hour < 7)
        {
            trx.clearReport();
            if (isSendReport)
            {
                await report.createReportCSV();
                isSendReport = false;
                string result = await HitServices.SendEmailReport(trx, config);
                await Task.Delay(3000);
                JObject jobResult = JObject.Parse(result);
                if (jobResult["fcdEmailResult"]["statusCode"].ToString() == "2111")
                {
                    Console.WriteLine("SEND REPORT SUCCESS");
                }
                else
                {
                    Console.WriteLine("SEND REPORT FAILED");
                }
            }
        }
        else
        {
            isSendReport = true;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        trx.clear();
        Utility.WriteLog("Home condition : clear transaksi success", "step-action");
        trx.clearTransactionLog();
        Utility.WriteLog("Home condition : clear transaction log success", "step-action");
        trx.clearArray();
        Utility.WriteLog("Home condition : clear array success", "step-action");
        trx.clearArrayNasabah();
        Utility.WriteLog("Home condition : clear array nasabah success", "step-action");
        trx.ClearList();
        Utility.WriteLog("Home condition : clear list success", "step-action");

        sPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
        try
        {
            await EDCClearBuffer("15");
            Console.WriteLine("EDC CLEAR BUFFER SUCCESS");
        }
        catch (Exception ex)
        {
            Console.WriteLine("EDC CLEAR BUFFER FAILED");
            Console.WriteLine(ex.Message);
            Utility.WriteLog("Home condition : EDC error --> " + ex.Message, "step-action");
        }
    }

    private async Task Report()
    {
        if (trx.isSendReport == true)
        {
            trx.clearReport();
            if (isSendReport)
            {
                clickcount += 1;
                if (clickcount == 3)
                    OnClick.InvokeAsync("report");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //trx.timeOut = "default";
            //starttime = DateTime.Now;
            //await Task.Run(() => IdleTime());
            //if (isTime&&isTimer)
            //{
            //    isTimeOut = true;
            //    await Task.Delay(100);
            //    StateHasChanged();
            //    await Task.Delay(2000);
            //    isTime = false;
            //    isTimer = false;
            //    //OnClick.InvokeAsync("timeout");
            //}
        }
    }
    private async Task IdleTime()
    {
        do
        {
            span = DateTime.Now - starttime;
            if (overtime > 0 && span.TotalMilliseconds > overtime)
            {
                isRead = false;
                isTime = true;
                isTimeOut = true;
                break;
            }
        } while (isTimeOut == false);
    }

    private async Task EDCClearBuffer(string ecrmsg)
    {
        isLoop = true;
        string _statusCode = string.Empty;
        string stx = "02";
        string ecr = "424E49"; // BNI;
        string ecr_messsage = string.Empty;
        string etx = "03";
        string lrc = "00";
        string dataSplit = "";

        string dataRespond = string.Empty;
        SerialPort serialPort = new SerialPort();

        Utility.WriteLog("Home condition : EDC serial port close", "step-action");
        serialPort.Close();

        string request_BankFiller = string.Empty;

        request_BankFiller = edc.HexaBankFiller("");

        ecr_messsage = ecrmsg
            + request_BankFiller;

        string data = stx
            + ecr
            + ecr_messsage
            + etx
            + lrc;

        byte[] data2 = edc.StringToByteArray(data);
        byte[] data2_with_lrc = edc.LRC(data2);
        //data2[56] = 0x77;
        serialPort.PortName = sPort.PortName;
        serialPort.BaudRate = 115200;
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceivedLoop);

        Console.WriteLine("1");

        try
        {
            Utility.WriteLog("Home condition : EDC serial port open", "step-action");
            serialPort.Open();
            trx.AddTrail("OPEN SERIAL EDC", "", "SUCCESS");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Utility.WriteLog("Home condition : EDC error --> " + ex.Message, "step-action");
            trx.AddTrail("OPEN SERIAL EDC", "", "FAILED");
            isLoop = false;
        }

        Utility.WriteLog("Home condition : EDC serial port write", "step-action");
        serialPort.Write(data2_with_lrc, 0, data2_with_lrc.Length);

        await Task.Delay(150);

        dataRespond = string.Empty;
        dataSplit = string.Empty;
        //bool exitLoop = false;
        //Console.WriteLine(dataRespond);
        if (serialPort.IsOpen)
        {
            //Utility.WriteLog("Home condition : EDC serial port already open", "step-action");
            string dataCurrent = serialPort.ReadExisting();
            dataRespond += dataCurrent;
            Console.WriteLine("Data Current Pin: " + dataCurrent);
            Console.WriteLine("Data Respond Pin: " + dataRespond);
            if (dataRespond.Contains("BNI"))
            {
                dataSplit = dataRespond.Substring(dataRespond.IndexOf("BNI"));
                byte[] buffer = Encoding.ASCII.GetBytes(dataSplit);
                int intBuffer = buffer[4];
                switch (intBuffer)
                {
                    case 69:
                        //Console.WriteLine(strpin);
                        //if (strpin.Length == 6)
                        //{
                        //    isLoop = false;
                        //    await Task.Delay(100);
                        //}
                        //else
                        //    continue;
                        //Utility.WriteLog("Home condition : " + strpin, "step-action");
                        //Utility.WriteLog("Home condition : EDC pin enter", "step-action");
                        break;
                    case 88: //Cancel
                             //Console.WriteLine(strpin);
                        isCancel = true;
                        isComplete = false;
                        isTimeOut = false;
                        isLoop = false;
                        await Task.Delay(100);
                        Utility.WriteLog("Home condition : EDC pin cancel", "step-action");
                        break;
                    case 84: //Timeout
                             //Console.WriteLine(strpin);
                        isTimeOut = true;
                        isLoop = false;
                        isComplete = false;
                        isCancel = false;
                        await Task.Delay(100);
                        break;
                    case 67:
                        break;
                    case 32:
                        break;
                }
            }
            Console.WriteLine("Data Split Pin: " + dataSplit);
            if (dataRespond.Contains("\x06"))
            {
                if (dataRespond.Length > 10)
                {
                    //serialPort.Close();
                    Utility.WriteLog("Home condition : EDC ACK", "step-action");
                }
            }
            else if (dataRespond.Contains("\x15"))
            {
                serialPort.Close();
                Utility.WriteLog("Home condition : EDC NAK", "step-action");
            }
        }
        await Task.Delay(100);
        StateHasChanged();

        Console.WriteLine("2");
        Utility.WriteLog("Home condition : EDC serial port close", "step-action");
        serialPort.Close();
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
    }


    private async Task InputRekening()
    {
        TimeNow = DateTime.Now.ToString("HH:mm:ss");
        if (DateTime.Now.Hour > 21 || DateTime.Now.Hour < 7)
        {
            isNotHour = true;
            await Task.Delay(100);
            StateHasChanged();
            await Task.Delay(5000);
            isNotHour = false;
            await Task.Delay(100);
            StateHasChanged();
            Console.WriteLine(TimeNow);
            OnClick.InvokeAsync("nothour");
        }
        else
        {
            trx.isSendReport = true;
            isTimer = false;
            isTimeOut = true;
            OnClick.InvokeAsync("insertdebit");
        }

    }

    #region Test Terbilang
    string[] satuan = new string[10] { "NOL", "SATU", "DUA", "TIGA", "EMPAT", "LIMA", "ENAM", "TUJUH", "DELAPAN", "SEMBILAN" };
    string[] belasan = new string[10] { "SEPULUH", "SEBELAS", "DUA BELAS", "TIGA BELAS", "EMPAT BELAS", "LIMA BELAS", "ENAM BELAS", "TUJUH BELAS", "DELAPAN BELAS", "SEMBILAN BELAS" };
    string[] puluhan = new string[10] { "", "", "DUA PULUH", "TIGA PULUH", "EMPAT PULUH", "LIMA PULUH", "ENAM PULUH", "TUJUH PULUH", "DELAPAN PULUH", "SEMBILAN PULUH" };
    string[] ribuan = new string[5] { "", "RIBU", "JUTA", "MILYAR", "TRILIYUN" };

    string Terbilang(Decimal d)
    {
        string strHasil = "";
        Decimal frac = d - Decimal.Truncate(d);

        if (Decimal.Compare(frac, 0.0m) != 0)
            strHasil = " KOMA "+Terbilang(Decimal.Round(frac * 100)) ;
        else
            strHasil = "RUPIAH";
        int xDigit = 0;
        int xPosisi = 0;

        string strTemp = Decimal.Truncate(d).ToString();
        for (int i = strTemp.Length; i > 0; i--)
        {
            string tmpx = "";
            xDigit = Convert.ToInt32(strTemp.Substring(i - 1, 1));
            xPosisi = (strTemp.Length - i) + 1;
            switch (xPosisi % 3)
            {
                case 1:
                    bool allNull = false;
                    if (i == 1)
                        tmpx = satuan[xDigit] + " ";
                    else if (strTemp.Substring(i - 2, 1) == "1")
                        tmpx = belasan[xDigit] + " ";
                    else if (xDigit > 0)
                        tmpx = satuan[xDigit] + " ";
                    else
                    {
                        allNull = true;
                        if (i > 1)
                            if (strTemp.Substring(i - 2, 1) != "0")
                                allNull = false;
                        if (i > 2)
                            if (strTemp.Substring(i - 3, 1) != "0")
                                allNull = false;
                        tmpx = "";
                    }

                    if ((!allNull) && (xPosisi > 1))
                        if ((strTemp.Length == 4) && (strTemp.Substring(0, 1) == "1"))
                            tmpx = "SE" + ribuan[(int)Decimal.Round(xPosisi / 3m)] + " ";
                        else
                            tmpx = tmpx + ribuan[(int)Decimal.Round(xPosisi / 3)] + " ";
                    strHasil = tmpx + strHasil;
                    break;
                case 2:
                    if (xDigit > 0)
                        strHasil = puluhan[xDigit] + " " + strHasil;
                    break;
                case 0:
                    if (xDigit > 0)
                        if (xDigit == 1)
                            strHasil = "SERATUS " + strHasil;
                        else
                            strHasil = satuan[xDigit] + " RATUS " + strHasil;
                    break;
            }
        }
        strHasil = strHasil.Trim().ToUpper();
        if (strHasil.Length > 0)
        {
            strHasil = strHasil.Substring(0, 1).ToUpper() +
              strHasil.Substring(1, strHasil.Length - 1);
        }
        return strHasil;
    }
    #endregion
}
