@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using System.IO.Ports
@using System.Text;

@inject Config config
@inject Transaksi trx
@inject Utility utility
@inject EDC edc
@inject HitLog hitlog
<!-- ======= Hero Section ======= -->
<section id="hero" style="position: fixed;">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    @*<span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Cetak Histori Transaksi</span>*@
                    <h3 style="color: #00529C; font-size: 30px;">Silakan Gesek Kartu ATM Anda</h3>
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/Folder GIF/Swipe-card.gif" class="img-fluid" alt="" style="margin-top: 1%;">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <!-- <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;">Batal</button> -->
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progressHome" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="todo">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
                <li class="todo">
                    <em>6</em>
                    <!-- <span>Done</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <!-- <button type="button" class="btn btn-primary" style="float: right;">Lanjut</button> -->
        </div>
    </div>
</footer><!-- End Footer -->
@if (isLoading)
{
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.733);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="background-color: transparent;">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-white" role="status" style="padding:0.5rem; margin-top: 5%;">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <!-- <img src="../assets/img/Spinner.gif"> -->
                </div>
                <div style="text-align: center; color: rgb(255, 255, 255);">
                    <h3 class="teks" style="margin-top: 5%;">Mohon tunggu..</h3>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    private bool isEDC = true;
    private bool isLoop = false;
    private bool isCancel = false;
    private bool isComplete = false;
    private bool isKartu = false;
    private bool isTimeOut = false;
    private SerialPort sPort = new SerialPort();

    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(5000);
        isLoading = true;
        await Task.Delay(100);
        StateHasChanged();
        StateHasChanged();
        Utility.WriteLog("Home condition : input kartu success", "step-action");
        Utility.WriteLog("Home condition : move to input pin", "step-action");
        trx.jenisLayanan = 4;//4. Proses Persiapan Layanan
                             //OnClick.InvokeAsync("inputpin");

        //await Task.Delay(5000);
        //OnClick.InvokeAsync("inputpin");

        sPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
        await GetCard();
        if (!isCancel && !isTimeOut)
        {
            await CekKartu();
            if (!isKartu)
            {
                OnClick.InvokeAsync("kartusalah");
                return;
            }
            if (isComplete)
            {
                OnClick.InvokeAsync("inputpin");
            }
        }
        else
        {
            trx.statusLayanan = "CANCEL";
            HitLog.SendLog(trx, config, "INSERT DEBIT: USER Cancel Transaction");
            OnClick.InvokeAsync("default");
        }
    }
    private async Task CekKartu()
    {
        string cekKartu = string.Empty;
        if (trx.nomerKartu.Length > 0)
        {
            cekKartu = trx.nomerKartu.Substring(0, 6);
            if (cekKartu == "553479" || cekKartu == "522184" || cekKartu == "532659" || cekKartu == "601301")
            {
                isKartu = true;
            }
            else
            {
                isKartu = false;
            }
        }
        else
        {
            isKartu = false;
        }
    }
    private async Task GetCard()
    {
        sPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
        Utility.WriteLog("Home condition : EDC process start", "step-action");
        await Task.Delay(100);
        try
        {
            //await EDCClearBuffer("1200");
            await EDC("11");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Utility.WriteLog("Home condition : EDC error --> " + ex.Message, "step-action");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Home condition : entered into insert debit", "step-action");
        }
    }
    private async Task EDC(string ecrmsg)
    {
        isLoop = true;
        string _statusCode = string.Empty;
        string stx = "02";
        string ecr = "424E49"; // BNI;
        string ecr_messsage = string.Empty;
        string etx = "03";
        string lrc = "00";
        string dataSplit = "";

        string dataRespond = string.Empty;
        SerialPort serialPort = new SerialPort();

        Utility.WriteLog("Home condition : EDC serial port close", "step-action");
        serialPort.Close();

        string request_BankFiller = string.Empty;

        request_BankFiller = edc.HexaBankFiller("");

        ecr_messsage = ecrmsg
            + request_BankFiller;

        string data = stx
            + ecr
            + ecr_messsage
            + etx
            + lrc;

        byte[] data2 = edc.StringToByteArray(data);
        byte[] data2_with_lrc = edc.LRC(data2);
        //data2[56] = 0x77;
        serialPort.PortName = sPort.PortName;
        serialPort.BaudRate = 115200;
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceivedLoop);

        Console.WriteLine("1");

        try
        {
            Utility.WriteLog("Home condition : EDC serial port open", "step-action");
            serialPort.Open();
            trx.AddTrail("OPEN SERIAL EDC", "", "SUCCESS");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Utility.WriteLog("Home condition : EDC error --> " + ex.Message, "step-action");
            trx.AddTrail("OPEN SERIAL EDC", "", "FAILED");
            trx.statusLayanan = "CANCEL";
            HitLog.SendLog(trx, config, "INSERT DEBIT: Open Serial EDC Failed");
            isLoop = false;
            serialPort.Close();
            trx.setErrorService("IEC", "Open Serial EDC Failed");
            OnClick.InvokeAsync("error");
        }

        Utility.WriteLog("Home condition : EDC serial port write", "step-action");
        serialPort.Write(data2_with_lrc, 0, data2_with_lrc.Length);
        isLoading = false;
        await Task.Delay(100);
        StateHasChanged();

        while (isLoop)
        {
            await Task.Delay(150);

            dataRespond = string.Empty;
            dataSplit = string.Empty;
            //bool exitLoop = false;
            Console.WriteLine(dataRespond);
            if (serialPort.IsOpen)
            {
                //Utility.WriteLog("Home condition : EDC serial port already open", "step-action");
                string dataCurrent = serialPort.ReadExisting();
                dataRespond += dataCurrent;
                Console.WriteLine("Data Current: " + dataCurrent);
                Console.WriteLine("Data Respond: " + dataRespond);
                if (dataRespond.Contains("BNI"))
                {
                    dataSplit = dataRespond.Substring(dataRespond.IndexOf("BNI"));
                    byte[] buffer = Encoding.ASCII.GetBytes(dataSplit);
                    int intBuffer = buffer[4];
                    if (buffer[4] == 0x30 && buffer[5] == 0x30 && buffer[6] == 0x30 && buffer[7] == 0x30)
                    {
                        trx.nomerKartu = dataSplit.Substring(10, 16);
                        Console.WriteLine(trx.nomerKartu);
                        isComplete = true;
                        break;
                    }
                    else
                    {
                        isCancel = true;
                        break;
                    }
                }
                Console.WriteLine("Data Split: " + dataSplit);
                if (dataRespond.Contains("\x06"))
                {
                    if (dataRespond.Length > 10)
                    {
                        //serialPort.Close();
                        Utility.WriteLog("Home condition : EDC ACK", "step-action");
                    }
                }
                else if (dataRespond.Contains("\x15"))
                {
                    serialPort.Close();
                    isLoop = false;
                    Utility.WriteLog("Home condition : EDC NAK", "step-action");
                    trx.statusLayanan = "ERROR";
                    //HitLog.SendLog(trx, config, "INSERT DEBIT: EDC NAK");
                    trx.setErrorService("IEC", "EDC NAK");
                    OnClick.InvokeAsync("error");
                }
            }
            await Task.Delay(100);
            StateHasChanged();
        }

        Console.WriteLine("2");
        Utility.WriteLog("Home condition : EDC serial port close", "step-action");
        serialPort.Close();
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
    }
    private async Task EDCClearBuffer(string ecrmsg)
    {
        isLoop = true;
        string _statusCode = string.Empty;
        string stx = "02";
        string ecr = "424E49"; // BNI;
        string ecr_messsage = string.Empty;
        string etx = "03";
        string lrc = "00";
        string dataSplit = "";

        string dataRespond = string.Empty;
        SerialPort serialPort = new SerialPort();

        Utility.WriteLog("Home condition : EDC serial port close", "step-action");
        serialPort.Close();

        string request_BankFiller = string.Empty;

        request_BankFiller = edc.HexaBankFiller("");

        ecr_messsage = ecrmsg
            + request_BankFiller;

        string data = stx
            + ecr
            + ecr_messsage
            + etx
            + lrc;

        byte[] data2 = edc.StringToByteArray(data);
        byte[] data2_with_lrc = edc.LRC(data2);
        //data2[56] = 0x77;
        serialPort.PortName = sPort.PortName;
        serialPort.BaudRate = 115200;
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceivedLoop);

        Console.WriteLine("1");

        try
        {
            Utility.WriteLog("Home condition : EDC serial port open", "step-action");
            serialPort.Open();
            trx.AddTrail("OPEN SERIAL EDC", "", "SUCCESS");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Utility.WriteLog("Home condition : EDC error --> " + ex.Message, "step-action");
            trx.AddTrail("OPEN SERIAL EDC", "", "FAILED");
            trx.statusLayanan = "ERROR";
            //HitLog.SendLog(trx, config, "INSERT DEBIT: Open Serial EDC Failed");
            isLoop = false;
            trx.setErrorService("IEC", "Open Serial EDC Failed");
            OnClick.InvokeAsync("error");
        }

        Utility.WriteLog("Home condition : EDC serial port write", "step-action");
        serialPort.Write(data2_with_lrc, 0, data2_with_lrc.Length);

        await Task.Delay(150);

        dataRespond = string.Empty;
        dataSplit = string.Empty;
        //bool exitLoop = false;
        //Console.WriteLine(dataRespond);
        if (serialPort.IsOpen)
        {
            Utility.WriteLog("Home condition : EDC serial port already open", "step-action");
            string dataCurrent = serialPort.ReadExisting();
            dataRespond += dataCurrent;
            Console.WriteLine("Data Current Pin: " + dataCurrent);
            Console.WriteLine("Data Respond Pin: " + dataRespond);
            if (dataRespond.Contains("BNI"))
            {
                dataSplit = dataRespond.Substring(dataRespond.IndexOf("BNI"));
                byte[] buffer = Encoding.ASCII.GetBytes(dataSplit);
                int intBuffer = buffer[4];
                switch (intBuffer)
                {
                    case 69:
                        //Console.WriteLine(strpin);
                        //if (strpin.Length == 6)
                        //{
                        //    isLoop = false;
                        //    await Task.Delay(100);
                        //}
                        //else
                        //    continue;
                        //Utility.WriteLog("Home condition : " + strpin, "step-action");
                        //Utility.WriteLog("Home condition : EDC pin enter", "step-action");
                        break;
                    case 88: //Cancel
                             //Console.WriteLine(strpin);
                        isCancel = true;
                        isComplete = false;
                        isTimeOut = false;
                        isLoop = false;
                        await Task.Delay(100);
                        Utility.WriteLog("Home condition : EDC pin cancel", "step-action");
                        break;
                    case 84: //Timeout
                             //Console.WriteLine(strpin);
                        isTimeOut = true;
                        isLoop = false;
                        isComplete = false;
                        isCancel = false;
                        await Task.Delay(100);
                        break;
                    case 67:
                        break;
                    case 32:
                        break;
                }
            }
            Console.WriteLine("Data Split Pin: " + dataSplit);
            if (dataRespond.Contains("\x06"))
            {
                if (dataRespond.Length > 10)
                {
                    //serialPort.Close();
                    Utility.WriteLog("Home condition : EDC ACK", "step-action");
                }
            }
            else if (dataRespond.Contains("\x15"))
            {
                serialPort.Close();
                isLoop = false;
                Utility.WriteLog("Home condition : EDC NAK", "step-action");
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "INSERT DEBIT: EDC NAK");
                trx.setErrorService("IEC", "EDC NAK");
                OnClick.InvokeAsync("error");
            }
        }
        await Task.Delay(100);
        StateHasChanged();

        Console.WriteLine("2");
        Utility.WriteLog("Home condition : EDC serial port close", "step-action");
        serialPort.Close();
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
    }
}
