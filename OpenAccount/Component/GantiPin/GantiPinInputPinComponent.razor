@using Microsoft.AspNetCore.Components
@using System.IO.Ports
@using System.Text
@using OpenAccount.Data

@inject Utility utility
@inject Config config
@inject EDC edc
<!-- ======= Hero Section ======= -->
<section id="hero">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Ganti PIN</span><br>
                    <teks>Silakan Masukkan PIN Anda</teks>
                    <h3 style="color: #00529C; font-size: 25px;">"Tekan “ENTER” jika selesai memasukkan PIN"</h3>
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/Folder GIF/Enter-PIN.gif" class="img-fluid" alt="" style="margin-top: 5%;">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <!-- <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;">Batal</button> -->
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progressGP" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="todo">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Verification</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <!-- <button type="button" class="btn btn-primary" style="float: right;">Lanjut</button> -->
        </div>
    </div>
</footer><!-- End Footer -->

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private SerialPort sPort = new SerialPort();
    SerialPort serialPort = new SerialPort();
    private string strpin = string.Empty;
    private bool isLoop = true;
    private bool isCancel = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("ENTERED INTO GANTI PIN INPUT PIN");
            Utility.WriteLog("Ganti pin condition : entered into ganti pin input pin", "step-action");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        sPort.PortName = config.Read("PORT", Config.PARAM_PORT_EDC);
        await EDC("14");
        if (!isCancel)
        {
            if (strpin == "123456")
            {
                Console.WriteLine("INPUT PIN " + strpin + " SUCCESS");
                Utility.WriteLog("Ganti pin condition : input pin " + strpin + " success", "step-action");
                Console.WriteLine("MOVE TO GANTI PIN INPUT PIN BARU");
                Utility.WriteLog("Ganti pin condition : move to ganti pin input pin baru", "step-action");
                OnClick.InvokeAsync("gantipininputpinbaru");
            }
            else
            {
                Console.WriteLine("MOVE TO BLOKIR KARTU");
                Utility.WriteLog("Ganti pin condition : move to blokir kartu", "step-action");
                OnClick.InvokeAsync("blokirkartu");
            }
        }
        else
        {
            Console.WriteLine("MOVE TO HOME");
            Utility.WriteLog("Ganti pin condition : move to home", "step-action");
            OnClick.InvokeAsync("home");
        }
    }

    private async Task EDC(string ecrmsg)
    {
        isLoop = true;
        string _statusCode = string.Empty;
        string stx = "02";
        string ecr = "424E49"; // BNI;
        string ecr_messsage = string.Empty;
        string etx = "03";
        string lrc = "00";
        string dataSplit = "";

        string dataRespond = string.Empty;
        serialPort = new SerialPort();

        serialPort.Close();

        string request_BankFiller = string.Empty;

        request_BankFiller = edc.HexaBankFiller("");

        ecr_messsage = ecrmsg
            + request_BankFiller;

        string data = stx
            + ecr
            + ecr_messsage
            + etx
            + lrc;

        byte[] data2 = edc.StringToByteArray(data);
        byte[] data2_with_lrc = edc.LRC(data2);
        //data2[56] = 0x77;
        serialPort.PortName = sPort.PortName;
        serialPort.BaudRate = 115200;
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceivedLoop);

        Console.WriteLine("1");

        serialPort.Open();

        serialPort.Write(data2_with_lrc, 0, data2_with_lrc.Length);

        do
        {
            await Task.Delay(150);

            dataRespond = string.Empty;
            dataSplit = string.Empty;
            //bool exitLoop = false;
            //Console.WriteLine(dataRespond);
            if (serialPort.IsOpen)
            {

                string dataCurrent = serialPort.ReadExisting();
                dataRespond += dataCurrent;
                //Console.WriteLine("Data Current: " + dataCurrent);
                //Console.WriteLine("Data Respond: " + dataRespond);
                if (dataRespond.Contains("BNI"))
                {
                    dataSplit = dataRespond.Substring(dataRespond.IndexOf("BNI"));
                    byte[] buffer = Encoding.ASCII.GetBytes(dataSplit);
                    int intBuffer = buffer[4];
                    switch (intBuffer)
                    {
                        case 69:
                            //Console.WriteLine(strpin);
                            if (strpin.Length == 6)
                                isLoop = false;
                            break;
                        case 88:
                            //Console.WriteLine(strpin);
                            isCancel = true;
                            isLoop = false;
                            break;
                        case 84:
                            //Console.WriteLine(strpin);
                            isCancel = true;
                            isLoop = false;
                            break;
                        case 67:
                            strpin = string.Empty;
                            break;
                        case 32:
                            if (strpin.Length < 7)
                                strpin = strpin + "0";
                            //Console.WriteLine(strpin);
                            break;
                        case 1:
                            if (strpin.Length < 7)
                                strpin = strpin + "1";
                            //Console.WriteLine(strpin);
                            break;
                        case 2:
                            if (strpin.Length < 7)
                                strpin = strpin + "2";
                            //Console.WriteLine(strpin);
                            break;
                        case 3:
                            if (strpin.Length < 7)
                                strpin = strpin + "3";
                            //Console.WriteLine(strpin);
                            break;
                        case 4:
                            if (strpin.Length < 7)
                                strpin = strpin + "4";
                            //Console.WriteLine(strpin);
                            break;
                        case 5:
                            if (strpin.Length < 7)
                                strpin = strpin + "5";
                            //Console.WriteLine(strpin);
                            break;
                        case 6:
                            if (strpin.Length < 7)
                                strpin = strpin + "6";
                            //Console.WriteLine(strpin);
                            break;
                        case 7:
                            if (strpin.Length < 7)
                                strpin = strpin + "7";
                            //Console.WriteLine(strpin);
                            break;
                        case 8:
                            if (strpin.Length < 7)
                                strpin = strpin + "8";
                            //Console.WriteLine(strpin);
                            break;
                        case 9:
                            if (strpin.Length < 7)
                                strpin = strpin + "9";
                            //Console.WriteLine(strpin);
                            break;
                    }
                }
                //Console.WriteLine("Data Split: " + dataSplit);
                if (dataRespond.Contains("\x06"))
                {
                    if (dataRespond.Length > 10)
                    {
                        //serialPort.Close();
                        Console.WriteLine("EDC ACK");
                    }
                }
                else if (dataRespond.Contains("\x15"))
                {
                    serialPort.Close();
                    Console.WriteLine("EDC NAK");
                }
            }
            StateHasChanged();
        } while (isLoop);

        Console.WriteLine("2");
        serialPort.Close();
        //serialPort.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);
    }
}
