@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using System.IO

@inject Transaksi trx
@inject Config config
@inject Printer print
@inject Utility utility

<!-- ======= Hero Section ======= -->
<section id="hero">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Cetak Histori Transaksi</span><br>
                    <teks>Hello, @trx._Nasabah[0]</teks>
                    <h3 style="color: #00529C; margin-right: -2rem;">Anda akan Mencetak @jumlahtransaksi Histori Transaksi pada</h3><br>
                    <p>
                        <h3 style="color: #00529C;"><b>@jenisperiode</b></h3>
                        <h3 style="color: #F15A23;"><b>@startdate - @enddate</b></h3>
                    </p>
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/printer.png" class="img-fluid" alt="" style="margin-top: 5%;">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="PilihHistori">Kembali</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="done">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="done">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
                <li class="todo">
                    <em>6</em>
                    <!-- <span>Done</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" data-toggle="modal" data-target="#exampleModalCenter" @onclick="HistoriBerhasil">Cetak</button>
        </div>
    </div>
</footer><!-- End Footer -->
@if (isVisible)
{
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: rgb(0, 0, 0);">
                        <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                        <h3>Histori Transaksi Anda sedang dicetak...</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private bool isVisible = false;
    private bool isBaris = false;
    private string jenisperiode = "Periode Bulan Lalu";
    private string startdate;
    private string enddate;
    private string hourdate;
    private string path;
    private string[] lines;
    private string[] uraian;
    private string[] tipe;
    private string[] nominal;
    private string jumlahtransaksi;
    private int sisatransaksi;
    private string saldo;

    protected override async Task OnInitializedAsync()
    {
        startdate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-1).ToString("yyyy/MM/dd");
        enddate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddDays(-1).ToString("yyyy/MM/dd");
        hourdate = DateTime.Now.ToString("HH:mm:ss");
        trx.setHistoriTransaksi(jenisperiode, startdate, enddate, hourdate);

        path = config.Read("PATH", Config.PARAM_PATH_A4);
        lines = File.ReadAllLines(path);
        jumlahtransaksi = lines.Length.ToString();
        uraian = new string[lines.Length];
        tipe = new string[lines.Length];
        nominal = new string[lines.Length];
        for (int i = 0; i < lines.Length; i++)
        {
            string[] column = lines[i].Split(";");
            for (int j = 0; j < column.Length; j++)
            {
                if (j == 0)
                    uraian[i] = column[j];
                else if (j == 1)
                    tipe[i] = column[j];
                else if (j == 2)
                    nominal[i] = column[j];
            }
        }
        Console.WriteLine("INPUT DATA SUCCESS");
        Utility.WriteLog("Histori condition : input data from " + path + " success", "step-action");
        saldo = config.Read("NASABAH", Config.PARAM_SALDO_NASABAH);
        trx.setDataHistoriTransaksi(jumlahtransaksi, uraian, tipe, nominal, saldo);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("ENTERED INTO HISTORI BULAN LALU");
            Utility.WriteLog("Histori condition : entered into history bulan lalu", "step-action");
        }
    }

    private async Task PilihHistori()
    {
        OnClick.InvokeAsync("historiPilih");
    }

    private async Task HistoriBerhasil()
    {
        isVisible = !isVisible;
        await Task.Delay(100);

        int maxbaris = 12;
        int totalbaris = trx._HistoriUraian.Length;
        int halaman;
        int maxhalaman;
        if (totalbaris > maxbaris)
        {
            int n = totalbaris / maxbaris;
            string[] tempuraian = null;
            string[] temptipe = null;
            string[] tempnominal = null;
            int startindex = 0;
            if (totalbaris % maxbaris > 0)
            {
                n += 1;
            }
            maxhalaman = n;
            trx.setMaxHalamanHistoriTransaksi(maxhalaman.ToString());
            tempuraian = new string[trx._HistoriUraian.Length];
            temptipe = new string[trx._HistoriTipe.Length];
            tempnominal = new string[trx._HistoriNominal.Length];
            Array.Copy(trx._HistoriUraian, startindex, tempuraian, 0, trx._HistoriUraian.Length);
            Array.Copy(trx._HistoriTipe, startindex, temptipe, 0, trx._HistoriTipe.Length);
            Array.Copy(trx._HistoriNominal, startindex, tempnominal, 0, trx._HistoriNominal.Length);
            halaman = 1;
            sisatransaksi = totalbaris;
            for (int i = 0; i < n; i++)
            {
                uraian = null;
                tipe = null;
                nominal = null;
                if (i == n - 1)
                {
                    trx.clearArray();
                    int sisabaris = tempuraian.Length - startindex;
                    uraian = new string[sisabaris];
                    tipe = new string[sisabaris];
                    nominal = new string[sisabaris];
                    Array.Copy(tempuraian, startindex, uraian, 0, sisabaris);
                    Array.Copy(temptipe, startindex, tipe, 0, sisabaris);
                    Array.Copy(tempnominal, startindex, nominal, 0, sisabaris);
                    trx.setHistoriTransaksi(uraian, tipe, nominal, halaman.ToString());
                    Console.WriteLine("PRINT HALAMAN KE-" + halaman.ToString());
                    Utility.WriteLog("Histori condition : print halaman ke-" + halaman.ToString(), "step-action");
                    saldo = await Task.Run(() => print.PrintHistori(trx));
                    Console.WriteLine("PRINT HALAMAN KE-" + halaman.ToString() + " SUCCESS");
                    Utility.WriteLog("Histori condition : print history halaman ke-" + halaman.ToString() + " success", "step-action");
                    //await Task.Delay(20000);
                    await Task.Delay(8000);
                    isVisible = false;
                    await Task.Delay(100);
                    OnClick.InvokeAsync("historiberhasil");
                    break;
                }
                else
                {
                    trx.clearArray();
                    uraian = new string[maxbaris];
                    tipe = new string[maxbaris];
                    nominal = new string[maxbaris];
                    Array.Copy(tempuraian, startindex, uraian, 0, maxbaris);
                    Array.Copy(temptipe, startindex, tipe, 0, maxbaris);
                    Array.Copy(tempnominal, startindex, nominal, 0, maxbaris);
                    trx.setHistoriTransaksi(uraian, tipe, nominal, halaman.ToString());
                    Console.WriteLine("PRINT HALAMAN KE-" + halaman.ToString());
                    Utility.WriteLog("Histori condition : print halaman ke-" + halaman.ToString(), "step-action");
                    saldo = await Task.Run(() => print.PrintHistori(trx));
                    Console.WriteLine("PRINT HALAMAN KE-" + halaman.ToString() + " SUCCESS");
                    Utility.WriteLog("Histori condition : print history halaman ke-" + halaman.ToString() + " success", "step-action");
                    startindex += maxbaris;
                    halaman += 1;
                    maxhalaman -= 1;
                    sisatransaksi -= maxbaris;
                    await Task.Delay(8000);
                }
                //isVisible = false;
                //if (maxhalaman >= 1)
                //{
                //    isBaris = !isBaris;
                //    StateHasChanged();
                //    do
                //    {
                //        await Task.Delay(100);
                //    } while (isBaris);
                //}
            }
        }
        else if (totalbaris < maxbaris)
        {
            saldo = await Task.Run(() => print.PrintHistori(trx));
            await Task.Delay(8000);
            OnClick.InvokeAsync("historiberhasil");
        }
    }
}
