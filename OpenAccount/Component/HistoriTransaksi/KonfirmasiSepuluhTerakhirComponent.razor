@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using System.IO
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@inject Transaksi trx
@inject Config config
@inject Printer print
@inject HitServices services

<!-- ======= Hero Section ======= -->
<section id="hero">

    <div class="container">
        <div class="row">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Cetak Histori Transaksi</span><br>
                    <teks>Hello, @trx._Nasabah[0]</teks>
                    <h3 style="color: #00529C; margin-right: -2rem;">Anda akan Mencetak Histori Transaksi pada</h3><br>
                    <p>
                        <h3 style="color: #00529C;"><b>Sepuluh Transaksi Terakhir</b></h3>
                        <h3 style="color: #00529C;"><b>Sampai Dengan</b></h3>
                        <h3 style="color: #F15A23;"><b>@date</b></h3>
                    </p>
                </div>
            </div>
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <img src="../assets/img/printer.png" class="img-fluid" alt="" style="margin-top: 5%;">
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-primary" style="background-color: #4E4E4E;" @onclick="PilihHistori">Kembali</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="done">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <button type="button" class="btn btn-primary" style="float: right;" data-toggle="modal" data-target="#exampleModalCenter" @onclick="HistoriBerhasil">Cetak</button>
        </div>
    </div>
</footer><!-- End Footer -->
@if (isVisible)
{
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: rgb(0, 0, 0);">
                        <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                        <h3>Sedang dalam proses...</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private bool isVisible;
    private string date;
    private string[] tanggal;
    private string[] nominal;
    private string[] kode;
    private string saldo;
    private string path;
    private string[] lines;

    protected override async Task OnInitializedAsync()
    {
        date = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day).ToString("yyyy/MM/dd");
        trx.clearArray();
        //path = config.Read("PATH", Config.PARAM_PATH_THERMAL);
        //lines = File.ReadAllLines(path);
        //tanggal = new string[lines.Length];
        //kode = new string[lines.Length];
        //nominal = new string[lines.Length];
        saldo = config.Read("NASABAH", Config.PARAM_SALDO_NASABAH);

        Utility.WriteLog("Histori condition : hit service thermal start", "step-action");
        await ServiceThermal();

        //for (int i = 0; i < lines.Length; i++)
        //{
        //    string[] column = lines[i].Split(";");
        //    for (int j = 0; j < column.Length; j++)
        //    {
        //        if (j == 0)
        //        {
        //            tanggal[i] = column[j];
        //        }
        //        else if (j == 1)
        //        {
        //            kode[i] = column[j];
        //        }
        //        else if (j == 2)
        //        {
        //            nominal[i] = column[j];
        //        }
        //    }
        //}
        Utility.WriteLog("Histori condition : input data from " + path + " success", "step-action");
        //trx.setHistoriThermal(tanggal, kode, nominal, saldo);
        trx.setSaldoThermal(saldo);
        Utility.WriteLog("Histori condition : set saldo thermal success", "step-action");
    }

    private async Task ServiceThermal()
    {
        string myJson = "{\"name\":\"name\"," + "\"job\":\"job\"}";
        string myLink = config.Read("LINK", Config.PARAM_SERVICES_LINK);
        string myUrl = myLink + config.Read("LINK", Config.PARAM_SERVICES_THERMAL);
        trx._Nasabah[1] = myUrl.Substring(myUrl.Length - 15, 15);
        Utility.WriteLog("Histori condition : get service start", "step-action");
        string strResultGET = await services.GetCallAPI(myUrl, myJson);
        if (strResultGET != null)
        {
            JObject jobResult = JObject.Parse(strResultGET);
            trx.setTransaksiID((string)jobResult["transaction"].SelectToken("transactionId"));
            Utility.WriteLog("Histori condition : set transaksi ID " + trx._TransaksiID + " success", "step-action");

            if ((string)jobResult["transaction"].SelectToken("responseCode") == "0000")
            {
                Utility.WriteLog("Histori condition : hit service thermal success", "step-action");
                foreach (var transaksi in jobResult.SelectToken("listTransaction").Select((transaksi) => (transaksi)))
                {
                    trx.AddListThermal((string)transaksi.SelectToken("transactionId"), (string)transaksi.SelectToken("jenisTransaksi"), (string)transaksi.SelectToken("nominal"), (string)transaksi.SelectToken("keterangan"), (string)transaksi.SelectToken("kodeTransaksi"), (string)transaksi.SelectToken("tanggal"), (string)transaksi.SelectToken("securityCode"));
                }
                Utility.WriteLog("Histori condition : get list data success", "step-action");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Histori condition : entered into history sepuluh terakhir", "step-action");
        }
    }

    private async Task PilihHistori()
    {
        Utility.WriteLog("Histori condition : move to histori pilih menu", "step-action");
        OnClick.InvokeAsync("historiPilih");
    }

    private async Task HistoriBerhasil()
    {
        isVisible = !isVisible;
        await Task.Delay(100);
        Utility.WriteLog("Histori condition : print thermal started", "step-action");
        await print.PrintThermal(trx);
        Utility.WriteLog("Histori condition : print thermal finished", "step-action");
        Utility.WriteLog("Histori condition : move to histori berhasil", "step-action");
        OnClick.InvokeAsync("historiberhasil");
    }
}
