@using Microsoft.AspNetCore.Components
@using OpenAccount.Data
@using System.IO
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@inject Transaksi trx
@inject Utility utility
@inject Config config
@inject Printer print
<!-- ======= Hero Section ======= -->
<section id="hero" @onclick="ResetTimer">

    <div class="container">
        <div class="row" style="margin-top: 8%;">
            <div class="col-xl-6 pt-5 pt-lg-0 order-2 order-lg-1 d-flex flex-column justify-content-center" data-aos="fade-up">
                <div>
                    <span class="badge badge-primary" style="margin-bottom: 2rem; font-size: 20px;">Cetak Histori Transaksi</span><br>
                    <teks>Hello, @trx.namaNasabah</teks>
                    <h3 style="color: #00529C; font-weight: 400;">Silakan pilih periode transaksi</h3><br>
                </div>
            </div>
            @*<div class="col-xl-12 order-3 order-lg-3 hero-img" data-aos="fade-left">
                    <div class="form-input-data">
                        <div id="btn-periode" class="col-md-12" style="text-align: center;">
                            <div class="form-group">
                                <button type="button" class="btn2 btn-histori" @onclick="HistoriBulanBerjalan">Periode Bulan Berjalan</button>
                                <button type="button" class="btn2 btn-histori" style="margin-left: 1rem;" @onclick="HistoriBulanTerakhir">Periode 1 Bulan Terakhir</button>
                            </div>
                            <div class="form-group">
                                <button type="button" class="btn2 btn-histori" @onclick="HistoriBulanLalu">Periode Bulan Lalu</button>
                                <button type="button" class="btn2 btn-histori" style="margin-left: 1rem;" @onclick="HistoriSepuluhTerakhir">5 Transaksi Terakhir</button>
                            </div>
                        </div>
                    </div>
                </div>*@
            <div class="col-xl-6 order-1 order-lg-2 hero-img" data-aos="fade-left">
                <div>
                    <div class="card" style="width: 80%; border: 2px solid #007BFF; border-radius: 10px; float: right;" @onclick="HistoriMonthly">
                        <div class="row no-gutters" style="opacity:1;">
                            <div class="col-md-4" style="text-align: center;">
                                <img src="../assets/img/full-statement.png" style="padding: 25px; width: 80%;">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body" style="text-align:left;  margin-left: -1.5rem; margin-top: 2%;">
                                    <h5 class="card-title">Full Statement</h5>
                                    <b class="card-text" style="color: #3D80BC;">Mencetak 1 periode penuh</b>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card" style="width: 80%; border: 2px solid #007BFF; border-radius: 10px; float: right; margin-top: 3%;" @onclick="HistoriSepuluhTerakhir">

                        <div class="row no-gutters">
                            <div class="col-md-4" style="text-align: center;">
                                <img src="../assets/img/5-transaksi.png" style="padding: 25px; width: 80%;">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body" style="text-align:left;  margin-left: -1.5rem; margin-top: 2%;">
                                    <h5 class="card-title">5 Transaksi Terakhir</h5>
                                    <b class="card-text" style="color: #3D80BC;">Mencetak 5 transaksi terakhir</b>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- End Hero -->
<!-- ======= Footer ======= -->
<footer id="footer" class="fixed-bottom">
    <div class="container" style="display: flex;">
        <div class="col-xl-2 order-1 order-lg-1">
            <button type="button" class="btn btn-secondary" @onclick="Home">Batal</button>
        </div>
        <div class="col-xl-8 order-2 order-lg-2">
            <ol class="track-progress" style="margin-left: 0%; margin-bottom: 2%;">
                <li class="done">
                    <em>1</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="done">
                    <em>2</em>
                    <!-- <span>T & C</span> -->
                </li>
                <li class="done">
                    <em>3</em>
                    <!-- <span>Menu</span> -->
                </li>
                <li class="todo">
                    <em>4</em>
                    <!-- <span>Verification</span> -->
                </li>
                <li class="todo">
                    <em>5</em>
                    <!-- <span>Insert Money</span> -->
                </li>
            </ol>
        </div>
        <div class="col-xl-2 order-3 order-lg-3">
            <!-- <button class="btn btn-primary" type="submit" style="float: right;" disabled>Lanjut</button> -->
        </div>
    </div>
</footer><!-- End Footer -->

@if (isVisible)
{
    @*<div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div style="text-align: center; color: rgb(0, 0, 0);">
                            <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                            <h5 style="font-style:italic;">Sedang dalam proses...</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.733);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="background-color: transparent;">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-white" role="status" style="padding:0.5rem; margin-top: 5%;">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <!-- <img src="../assets/img/Spinner.gif"> -->
                </div>
                <div style="text-align: center; color: rgb(255, 255, 255);">
                    <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                    <h3>Sedang dalam proses...</h3>
                </div>

            </div>
        </div>
    </div>
}

@*@if (isTime)
{
    <div class="modal" id="exampleModalCenter" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div style="text-align: center; color: rgb(0, 0, 0);">
                        <h3 class="teks" style="margin-top: 5%;">MAAF,</h3>
                        <h5 style="font-style:italic;">Waktu Anda Telah Habis!</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>
}*@

@if (isRead)
{
    @*<div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div style="text-align: center; color: rgb(0, 0, 0);">
                            <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                            <h5 style="font-style:italic;">Sistem sedang membaca data tabungan anda</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.733);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="background-color: transparent;">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-white" role="status" style="padding:0.5rem; margin-top: 5%;">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <!-- <img src="../assets/img/Spinner.gif"> -->
                </div>
                <div style="text-align: center; color: rgb(255, 255, 255);">
                    <h3 class="teks" style="margin-top: 5%;">Mohon tunggu,</h3>
                    <h3>Sistem sedang membaca data tabungan anda</h3>
                </div>

            </div>
        </div>
    </div>
}

@if (isError)
{
    @*<div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color:rgba(0, 0, 0, 0.418);">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status" style="padding:0.5rem; margin-top: 5%;">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div style="text-align: center; color: rgb(0, 0, 0);">
                            <h3 class="teks" style="margin-top: 5%;">SISTEM ERROR</h3>
                            <h5 style="font-style:italic;">Silahkan Hubungi Customer Service.</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
    <div class="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.733);">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content" style="background-color: transparent;">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-white" role="status" style="padding:0.5rem; margin-top: 5%;">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <!-- <img src="../assets/img/Spinner.gif"> -->
                </div>
                <div style="text-align: center; color: rgb(255, 255, 255);">
                    <h3 class="teks" style="margin-top: 5%;">SISTEM ERROR</h3>
                    <h5 style="font-style:italic;">Silahkan Hubungi Customer Service.</h5>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private TimeSpan span;
    private int overtime = 60000;
    private bool isTimeOut = false;
    private bool isTime = false;
    private bool isTimer = true;
    private DateTime starttime;

    private bool isRead = false;
    private string jumlahtransaksi;
    private int tempjumlahtransaksi;
    private bool isError = false;
    private bool isVisible = false;
    private bool isSuccess = false;

    private async Task ResetTimer()
    {
        starttime = DateTime.Now;
    }
    private async Task IdleTime()
    {
        do
        {
            span = DateTime.Now - starttime;
            if (overtime > 0 && span.TotalMilliseconds > overtime)
            {
                isTime = true;
                isTimeOut = true;
                break;
            }
        } while (isTimeOut == false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utility.WriteLog("Histori condition : entered into histori pilih menu", "step-action");
            trx.timeOut = "historiPilih";
            isTimer = true;
            starttime = DateTime.Now;
            await Task.Run(() => IdleTime());
            if (isTime && isTimeOut)
            {
                isTimeOut = true;
                await Task.Delay(100);
                StateHasChanged();
                await Task.Delay(2000);
                isTime = false;
                OnClick.InvokeAsync("konfirmasitimeout");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckStatus();
        trx._AccountNumber = trx._AccountNumber2;
        Utility.WriteLog("Histori condition : set account number " + trx._AccountNumber + " on Histori Pilih", "step-action");
    }

    private async Task CheckStatus()
    {
        string errorcode;
        string errormessage;
        string status = trx.mbStatus;
        switch (status)
        {
            case "1":
                break;
            case "2":
                errorcode = "NotStatus";
                errormessage = "Account Status Closed";
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                isTimeOut = true;
                isTimer = false;
                OnClick.InvokeAsync("error");
                break;
            case "3":
                errorcode = "NotStatus";
                errormessage = "Account Status Matured but Not Closed";
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                isTimeOut = true;
                isTimer = false;
                OnClick.InvokeAsync("error");
                break;
            case "4":
                break;
            case "5":
                errorcode = "NotStatus";
                errormessage = "Account Status Zero Actual";
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                isTimeOut = true;
                isTimer = false;
                OnClick.InvokeAsync("error");
                break;
            case "6":
                errorcode = "NotStatus";
                errormessage = "Account Status Restricted";
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                isTimeOut = true;
                isTimer = false;
                OnClick.InvokeAsync("error");
                break;
            case "7":
                errorcode = "NotStatus";
                errormessage = "Account Status Frozen with No Actual";
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                isTimeOut = true;
                isTimer = false;
                OnClick.InvokeAsync("error");
                break;
            case "8":
                errorcode = "NotStatus";
                errormessage = "Account Status Charge Off";
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                isTimeOut = true;
                isTimer = false;
                OnClick.InvokeAsync("error");
                break;
            case "9":
                break;
        }
    }

    private async Task ServiceThermal()
    {
        string errorcode;
        string errormessage;
        try
        {
            string myJson = "{" +
            "\"acct_no\":\"" + trx._AccountNumber + "\"" +
            "}";
            string myLink = config.Read("LINK", Config.PARAM_SERVICES_LINK);
            string myUrl = myLink + config.Read("LINK", Config.PARAM_SERVICES_THERMAL);
            //string myUrl = "http://172.18.136.207:6001/invoke/bri.core.services.v1:fiveMutation";
            //trx._Nasabah[1] = myUrl.Substring(myUrl.Length - 15, 15);
            Utility.WriteLog("Histori condition : get service start", "step-action");
            try
            {
                string strResult = await HitServices.PostCallAPI(myUrl, myJson);
                if (strResult != null)
                {
                    JObject jobResult = JObject.Parse(strResult);
                    //trx.setTransaksiID((string)jobResult["transaction"].SelectToken("transactionId"));
                    //Utility.WriteLog("Histori condition : set transaksi ID " + trx._TransaksiID + " success", "step-action");

                    trx.setAccountNumber((string)jobResult["RESPONSE"].SelectToken("ACCT_NO"));

                    if ((string)jobResult["RESPONSE"].SelectToken("ERROR_CODE") == "DW-000" && (string)jobResult["RESPONSE"].SelectToken("RESPONSE_CODE") == "00")
                    {
                        Utility.WriteLog("Histori condition : hit service thermal success", "step-action");
                        foreach (var response in jobResult["RESPONSE"].SelectToken("DATA"))
                        {
                            trx.AddListThermal2((string)response.SelectToken("TRACCT"), (string)response.SelectToken("TRDATE"), (string)response.SelectToken("TRDATE2"),
                                (string)response.SelectToken("TIMENT"), (string)response.SelectToken("DORC"), (string)response.SelectToken("AMT"), (string)response.SelectToken("TRREMK"));
                        }
                        Utility.WriteLog("Histori condition : get list data success", "step-action");
                        tempjumlahtransaksi = trx._listthermal.Count;
                        isRead = false;
                        isSuccess = true;
                        trx.externalID = (string)jobResult["externalId"];
                        trx.AddTrail("GET DATA HISTORI", "", "SUCCESS");
                        await Task.Delay(100);
                        StateHasChanged();
                    }
                    else if ((string)jobResult["RESPONSE"].SelectToken("ERROR_CODE") == "DW-001" && (string)jobResult["RESPONSE"].SelectToken("RESPONSE_CODE") == "01")
                    {
                        Console.WriteLine("No Data Found");
                        isTimeOut = true;
                        isTimer = false;
                        errorcode = (string)jobResult["RESPONSE"].SelectToken("ERROR_CODE");
                        errormessage = (string)jobResult["RESPONSE"].SelectToken("RESPONSE_MESSAGE");
                        trx.setErrorService(errorcode, errormessage);
                        trx.statusLayanan = "CANCEL";
                        //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                        trx.ExternalID2 = (string)jobResult["externalId"];
                        trx.externalID = trx.ExternalID2;
                        trx._AccountNumber = trx._AccountNumber2;
                        //trx.setExternalId((string)jobResult["EXTERNALID
                        Console.WriteLine("EXTERNAL ID 2" + trx.ExternalID2);
                        Console.WriteLine("EXTERNAL ID" + trx.externalID);
                        Console.WriteLine("ACCOUNT NUMBER" + trx._AccountNumber);
                        HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                        OnClick.InvokeAsync("error");
                        return;
                    }
                    else
                    {
                        Console.WriteLine((string)jobResult["RESPONSE"].SelectToken("RESPONSE_MESSAGE"));
                        Utility.WriteLog("Histori condition : hit service thermal failed", "step-action");
                        //trx.AddTrail("GET DATA HISTORI", "NO DATA SEPULUH TERAKHIR", "FAILED");
                        //isRead = false;
                        //await Task.Delay(100);
                        //StateHasChanged();
                        isTimeOut = true;
                        isTimer = false;
                        errorcode = (string)jobResult["RESPONSE"].SelectToken("ERROR_CODE");
                        errormessage = (string)jobResult["RESPONSE"].SelectToken("RESPONSE_MESSAGE");
                        trx.setErrorService(errorcode, errormessage);
                        trx.statusLayanan = "ERROR";
                        //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                        trx.externalID = (string)jobResult["externalId"];
                        HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                        OnClick.InvokeAsync("error");
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                //Console.WriteLine(ex.Message);
                //isError = true;
                //isRead = false;
                //await Task.Delay(100);
                //StateHasChanged();
                //await Task.Delay(2000);
                //isError = false;
                //await Task.Delay(100);
                //StateHasChanged();
                isTimeOut = true;
                isTimer = false;
                errorcode = "Exception";
                errormessage = ex.Message;
                trx.setErrorService(errorcode, errormessage);
                trx.statusLayanan = "ERROR";
                //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
                OnClick.InvokeAsync("error");
            }
        }
        catch (Exception ex)
        {
            isTimeOut = true;
            isTimer = false;
            errorcode = "Exception";
            errormessage = ex.Message;
            trx.setErrorService(errorcode, errormessage);
            trx.statusLayanan = "ERROR";
            //HitLog.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
            HitServices.SendLog(trx, config, "HISTORY PILIH: " + errormessage);
            OnClick.InvokeAsync("error");
        }
    }
    private async Task HistoriMonthly()
    {
        isTimeOut = true;
        isTimer = false;
        Utility.WriteLog("Histori condition : move to histori Monthly Statement", "step-action");
        OnClick.InvokeAsync("monthlystatement");
    }
    private async Task HistoriBulanBerjalan()
    {
        isTimeOut = true;
        Utility.WriteLog("Histori condition : move to histori bulan berjalan", "step-action");
        isTimer = false;
        OnClick.InvokeAsync("historiBulanBerjalan");
    }
    private async Task HistoriBulanTerakhir()
    {
        isTimeOut = true;
        Utility.WriteLog("Histori condition : move to histori bulan terakhir", "step-action");
        isTimer = false;
        OnClick.InvokeAsync("historiBulanTerakhir");
    }
    private async Task HistoriBulanLalu()
    {
        isTimeOut = true;
        Utility.WriteLog("Histori condition : move to histori bulan lalu", "step-action");
        isTimer = false;
        OnClick.InvokeAsync("historiBulanLalu");
    }
    private async Task HistoriSepuluhTerakhir()
    {
        isTimeOut = true;
        isTimer = false;

        //Utility.WriteLog("Histori condition : move to histori sepuluh terakhir", "step-action");
        //OnClick.InvokeAsync("historiSepuluhTerakhir");

        await Task.Delay(500);
        isRead = true;
        await Task.Delay(100);
        StateHasChanged();
        Utility.WriteLog("Histori condition : hit service thermal start", "step-action");
        trx.jenisLayanan = 1;
        await ServiceThermal();

        if (isSuccess)
        {
            isVisible = !isVisible;
            await Task.Delay(100);
            Utility.WriteLog("Histori condition : print thermal started", "step-action");
            await print.PrintThermal(trx);
            Utility.WriteLog("Histori condition : print thermal finished", "step-action");
            isTimeOut = true;
            isTimer = false;
            Utility.WriteLog("Histori condition : move to histori berhasil", "step-action");
            OnClick.InvokeAsync("historiberhasil");
        }
    }

    /*private async Task HistoriMonthlyEmail()
    {
        trx.jenisLayanan = 3;
        isTimeOut = true;
        Utility.WriteLog("Histori condition : move to histori Monthly Statement", "step-action");
        isTimer = false;
        if (RegexUtilities.IsValidEmail(trx.emailNasabah))
        {
            trx.isEmail = true;
            OnClick.InvokeAsync("monthlystatement");
        }
        else
        {
            //Go to error email page notif
            trx._ServicesErrorMessage = "Email Not Valid";
            HitLog.SendLog(trx, config, "HISTORY PILIH: Email Not Valid");
            OnClick.InvokeAsync("error");
        }
    }*/

    private async Task Home()
    {
        isTimeOut = true;
        isTimer = false;
        Utility.WriteLog("Histori condition : move to ambil kartu", "step-action");
        trx.statusLayanan = "CANCEL";
        //HitLog.SendLog(trx, config, "HISTORY PILIH: User Cancel Transaction");
        HitServices.SendLog(trx, config, "HISTORY PILIH: User Cancel Transaction");
        OnClick.InvokeAsync("default");
    }
}
